day05 回顾
循环
for 语句
 遍历可迭代对象
 语法：
 for 变量名 in 可迭代对象：
      语句块1
 else：
      语句块2



可迭代对象：
  字符串 str
  里偶尔表 list
  range  返回回来的对象
  以及后面所学所有容器类都是可迭代对象


range 函数
range（终止整数）
range（，开始整数，终止整数，步长）
作用： 用于创建一个整数序列生成器（可迭代对象）


contine
 重新开始一次新的循环
 
列表容器
可变的序列


列表的创建：
 子面值的创建方式
 [],[1,2,3,4]
 构造函数的创建方法
  list（“abc"）
  list(range(1,10))
  list([1,2,3,4])
  list()
运算


+ +=  *= *
列表  += 可迭代对象（实现追加可迭代对象内的数据）

比较运算
《 《= 》 》= ==   ！=

依次比较






day06


列表的索引操作
index
索引的语法：
列表（整数表达式）
用法：
    等同于字符串的索引
    索引分为正向索引和反向索引 规则与字符串的规则完全相同
    示例：


    L = 【1,2,3,4,5】
        print（L【1】）  #2
        print（L【-1】） #5

列表的索引赋值
  列表示是可变的序列，可以通过索引赋值改变列表中的元素

  语法：
  列表【整数表达式】 = 表达式
  示例：
  L= 【1，-2,3,-4,5】
  L【1】 = 2
  print（L） #【1,2,3,-4,5】
  L【-2】 = 4
   print（L）      #【1,2,3,4,5】


列表的切片
列表【】
列表【::】
列表的切片是从列表中取出相应的元素  重新组成一个新的列表
列表的切片规则等同于字符画的切片规则
示例：

L = [0,1,2,3,4,5,6,7,8]
L2 = [1:9:2]          #  L2 = [1,3,5,7]

切片是可以越界的 【-100：10000】 可以    


列表的切片赋值
作用：

可以改变列表的排序  可以插入 删除和修改数据
语法：
 列表 【切片slice】 = 可迭代对象
说明，：
赋值运算符的右侧必须是可迭代对象
示例：

L = 【2,3.1，4.2，5】
L【1:3】=[3,4]       #L = [2,3,4,5]
L = [1:3] = 3.1415           #L = [2,3.1415,5]
L[1:] = range(3,7 )          #L=[2,3,4,5,6]

L= [2,4]
L[1:1] = [3]   #[2,3,4]  #L =[1:] = [3,4]
L[0:0] = range(2)  #L = [0,1,2,3,4]
L[5:5] = [5,6]      # L =[0,1,2,3,4,5,6]   L[-1,-1] 插入不行 得【0,1,2,3,5,6，4】
L = [2,4]
L[0:0] = "AB"  L = ["A","B",2,4]  字符串是可迭代对象  插是一个一个插 所以得结果

L【0:0】 = ["AB"]         L = ["AB",2,4]

L[::] = []  清空列表  不是创建列表 不等同于 L=【】

注意事项：
L= 【1,2,3,4】
L2 = L
L= 【】
print（L2)           ########### [1,2,3,4]

第二种做法：
L=[1，2，3，4]
L2 = L
L[:] = []  此处与上面有什么不同
print（L2)                ######## []

 
del  语句
用于删除 列表中的元素
语法
del 列表【索引】
del 列表 【切片】
示例：
L=[1,3.14,2,100,3]
del L[1]
del[2]
print(L)
说明
列表中的元素被删除  后续元素的索引值会变小  即后续元素前移


列表的切片操作的注意事项
对于步长不等于1的切片赋值   赋值运算符右侧对的可迭代对象提供的元素个数  一定要deng于切出的段数
如：
L= [1,2,3,4,5,6]
L [::2] = "ABC"   对
L[::2]  = "ABCDE"  错

python3常用的序列函数
len（seq） 返回序列的长度
max（x）  返回序列的最大元素（要求每两个元素都能比较大小
min（x） 返回序列的最小元素
sum（x）   返回序列中所有元素的和（元素必须是数值类型）
any（x）  真值测试  如果列表中其中一个值为真值 则返回True
all（x）  真值测试，如果列表中所有的值都为真值才返回True否则返回false

示例：
L = [1,3.14,0,999999,10]
len（L）   #5
max（L)          # 999999
min(L)            # 0
sum（L）  
any（L） True3
all（L） False

序列的相关的函数
reversed(seq)   返回原序列的返回顺序的可迭代对象
sorted（iterable，reverse=false）    返回可迭代对象中排序后的对象的列表
                
示例：
L =【5,9,7,1,3】
for x in reversed（L）：
    print(x)    #３１７９５　　　原序列的反向
Ｌ２　＝sorted(L) L2 = [1,3,5,7,9]
L3 = sorted（reverse = True)   # L3 = [9,7,5,3,1]


列表中长用的方法   help（list） bject

对象.方法名（方法传参）

深拷贝 和浅拷贝

1.不拷贝 
L1 = [1,2,[3.1,3.2,]]
L2 = L1  #两个对象同时绑定在一个对象上
L2[1] = 2.2
L2[2][0] = 3.14            #把3.1改成3.14
            
print(L2)              #[1,2.2,[3.14,3.2]]
print(L1)               #[1,2.2,[3.14,3.2]]

2.浅拷贝  shallow copy
浅拷贝是指在复制过程中   只复制一层变量 不会复制深层变量绑定的对象的复制过程
示例：

1.不拷贝 
L1 = [1,2,[3.1,3.2]]
L2 = L1.copy() #  不拷贝，两个对象同时绑定在一个对象上
L2[1] = 2.2
L2[2][0] = 3.14            #把3.1改成3.14
            
print(L2)              #[1,2.2,[3.14,3.2]]
print(L1)               #[1,2,[3.14,3.2]]          #######################################



3.深拷贝  deep copy
深拷贝是指在复制过程中  复制所有变量及变量关联的深层变量绑定的对象#####实现两个对象完全独立############

示例：

import copy   #  导入复制模块
L1 = [1,2,[3.1,3.2]]
L2 =copy.deepcopy(L1) #深拷贝
L2[1] = 2.2
L2[2][0] = 3.14            #把3.1改成3.14
            
print(L2)              #[1,2.2,[3.14,3.2]]
print(L1)               #[1,2,[3.1,3.2]] ######################################################


思考：；；###
L1 = [1,2,"hello"]
L2 = L1.copy()
import copy                字符串是不变得 深拷贝浅拷贝一样的
L3 = copy. deepcopy(L1)
L2[2] += "!"
L3[2] += "?"
会影响到L1 吗            


列表和字符串比较
列表和字符串都属于序列  元素之间有先后顺序关系
字符串是不可以改变的序列 列表是可以改变得序列
字符串只能存储字符 而列表可以存储任意类型的字符
列表和字符串都是可迭代对象

不可变数据类型
      占用内存相对较少  数据安全 但不能实现  添加删除等操作
可变数据类型：
      占用内存较多  可以实现灵活的添加 删除 修改等操作

字符串文本解析方法 split.splitlines 和join
S.split（sep = None）  将字符串使用sep作用分割S字符串 返回分割之后的字符串列表 当不给定参数时  用空白字符作为
     分隔符
               sep不给时 以空格作为分割符
     用法：    S.split(' ')  用空格符断开（‘i’）  以i断开


S.seplitlines（sep = None）  将字符串以行为单位进行分割   形成分割后的列表

                                默认以换行符为分隔符


join（iterable）  用可迭代对象中的字符串 返回一个中间用s进行分割的字符串

示例：
s = 'Beijing is capitl'
L = s.split(' ')  # L = ['Beijing', 'is','capitl']
S= ‘abc’


L2 = ['C:','Programe files','python3']
path = '\\'.join(L2)

','.join 容器名 (可迭代对象) 以逗号分割


列表推导式 list comprehension
  列表推导式是用可迭代对象来创建列表的表达式
  作用：
  用简易方法创建列表
  语法：
  【表达式 for 变量 in 可迭代对象】
  或
 【表达式 for 变量 in 可迭代对象 if 真值表达式】
示例

生产一个数字 1~9的整数的平方的列表
L =【1,4,9,16,25，...81】

 L = []
 for x in range(1,10):
    
    L.append(x ** 2)

print(L)


如下：：：：：
L2 = [x ** 2 for x in range(1,10)]
print(L2)


生成  1 ~ 9 奇数的平方的列表
 L1 = [x ** 2 for x in range(1,10) if x % 2 != 0 ]
嵌套
【表达式1 for 变量1 in 可迭代对象1 if 真值表达式1
            for 变量2 in 可跌代对象2 if 真值表达式2
                      .....】
示例
L = [x + y for x in [10,20,30] for y in[1,2,3]]
print(L)      [11,12,13,21,22,23,31,32,33]






























































































