

1.正则表达式compile对象属性变量

版本控制命令
    1.回到之前的commit id位置
    git reset --hard HEAD^ 

    * HEAD后有几个^就表示退回几个commit位置

        git reset --hard commit_id               ***************************************

            *commit_id用前七位

            * 选定commit_id表示HEAD指向选定的id而不是回复到指定的
                commit_id版本


    2.去往之前较新的版本

        git reflog 查看历史版本记录

        * 查看后使用get reset --hard即可选择回到某个操作之后的状态 ****************************************
    3.标签管理
        什么是标签： 即在某个commit_id 位置添加快照，保存工作状态，一般用于版本的迭代，和重要项目节点记录

            1.创建新的标签
                * 默认在最新的commit_id 处添加标签
                git tag v1.0
                git tag v1.0[commit_id]
                git tag v1.0 -m "message"
                * 也可以指定某一个commit_id版本
                * 为标签添加信息
            2.查看标签
                git tag  列出当前标签
                git show v1.0  显示标签具体信息

            3.去往某个标签版本
                git reset --hard v1.0
            
            4.删除标签
                git tag -dv1.2

临时工作区操作
        1.创建工作区
            git stash
            * 对工作区文件的修改进行保存
        2.查看已经保存的工作区记录
            git stash list
            * 最新保存为{0}以此类推
        3. 选择应用某个工作区
            git stash apply stash@{0}
            * 执行该命令时，工作区必须为干净状态

        4.删除保存的工作区
            git stash drop stash@{0}
            git stash pop 删除最新的 并回复最新保存的操作
            git stash clear 删除所有工作区

分支操作
    什么是分支：分支即每个人获取原有代码，在此基础上创建自己的工作环境，单独开发，不会影响其他分支工作，开发完成后再统一合并
    
    1.查看当前工作分支
        git branch
            它会列出所有项目分支  *表示当前工作分支
    
    
    2.分支创建和切换
        git branch 【名字】              创建分支
        git checkout 【名字】            切换分支
        * 创建新的分支时最好确保当前分支是干净的
        git checkout -b 【Tom】  创建并切换该分支


    3.合并分支
    
        git merge 【分支名字】
        * 在master 分支执行该命令 即将其他分支内容集合到master
        






