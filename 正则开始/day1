

正则表达式（RE）

动机 
1.文本处理已经成为计算机常见的工作之一
2.对文本内容的搜索，定位，提取时逻辑比较复杂的工作
3.为了快速方便的问题 产生了正则表达式技术

定义：即文本的高级匹配模式，提供搜索，替换等功能。其本质是一个由一系列字符和特殊符号构成的子符串，
    这个字符画即是正则表达式


目标:
    1.  熟练掌握正则表达式
    2.  知道什么是正则表达式，如何应用
    2.  能够正确读懂正则表达式，编写简单的正则匹配
    4.  会使用re模块操作正则表达式

正则表达式特点：
    1.方便文本处理
    2.支持语言众多
    3。使用灵活变化多样


python  --》re模块

re.findall（pattern，string）
功能；获取所有正则表达式匹配的内容
参数：pattern   正则表达式
    string      目标字符串

返回：列表，   得到所有符合条件的内容


元字符的使用
    1.普通字符

        元字符：a b C 张
        匹配规则：每个字符匹配对应的字符
        

        import re
        re.findall('hello','hello word hello cindi')
        ['hello', 'hello']


    2.或

    元字符; |
    匹配规则：匹配 |两则任意一个 正则表达式规则

    >>> re.findall('hello|word|ss','hello sshfkssfg wordff hello cindi')
        ['hello', 'ss', 'ss', 'word', 'hello']

        ****   |  旁边不要加空格 否则连空格也是匹配的内容
        ****  如果要匹配的内容有重叠 如：
                >>> re.findall('ab|bc','abc')
                    ['ab']

    3.元字符
        .   能匹配任何一个： 
        匹配规则： 匹配出\n外任意一个字符
        eg：  re.findall('f.o','foo,flo,f和o')


    4.匹配字符串开始位置

    元字符： ^
    匹配规则：匹配目标子符串的开头位置
        eg：>>> re.findall('^run','run,fh,g')
            ['run']

            ******如果开头没有所匹配的字符串 那么不管后面有无，匹配为空

    5.匹配字符串的结尾位置
          元字符：$ 
          匹配规则：匹配字符串结尾位置
        e.g.
            re.findall('hello$','hello world hello kitty')
              # []
           
            re.findall('hello$','hello world hello kitty hello')
             # ['hello']
             * 即结尾处有hello
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    6.匹配重复

    元字符：  *
    批评规则： 匹配前面的字符出现0次或者多次

    eg：
        >> re.findall('fo*','fooooooooo')
            ['fooooooooo']

       >>> re.findall('fo*','fdjdj')
            ['f'] 

        o*为一个整体

        >>> re.findall('o*','fdjd')
            ['', '', '', '', '']

        注意：fo* 匹配f为o出现0次，而fo表达出现一次  



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    7.匹配重复

    元字符： *
    匹配规则：匹配前面的字符，0次，1次或多次
    eg：
        >>> re.findall('fo*','fofodjd')
            ['fo', 'fo']


    元字符：  +
    匹配规则：匹配前面的字符出现1次或多次
    
    eg：
    >>> re.findall('fo+','foooooooooooddwfo')
        ['fooooooooooo', 'fo']


    8.匹配重复

    元字符： ？
    匹配规则：匹配前面出现的字符0次或1次

    eg：
        >>> re.findall('ab?','abcdefabb')
            ['ab', 'ab']


    9.匹配重复

    元字符：{n}
    匹配规则：匹配前面的字符出现指定次数

    eg：
        >>> re.findall('a{3}','aabaaa')
            ['aaa']

    10.匹配重复

    元字符：{m,n}
    匹配规则：匹配前面出现的字符m次到n次

    eg：
    >>> re.findall('a{3,4}','aabaaaa')
        ['aaaa']
    >>> re.findall('a{3,4}','aabaaaabaaa')
        ['aaaa', 'aaa']

    >>> re.findall('ab{3,4}','abbbkabbbb')
    ['abbb', 'abbbb']

    11.匹配字符集

    元字符： [字符集]
    匹配规则：匹配字符集中任意一个字符

    >>> re.findall('ab[fl]','abfslbbb')
    ['abf']
    
    >>> re.findall('[fl]','abfslbbb')
    ['f', 'l']
    
    >>> re.findall('ab[fl]','abfl')
    ['abf']

    ** 注意 只匹配字符集中的一个

    [abc123] --> 字符集中字符
    [a-z] [A-Z][0-9] 取字符区间内所有值
    [_#123a-z]  可以混到一起  一半把普通的写到前面   字符集写到后面

    eg：  匹配大写字母开头
            [A-Z][A-Z]*

    12.匹配字符集

    元字符：[^...]
    匹配规则：匹配除了字符集中的任意一个字符

    eg：
    >>> re.findall('[^, ]+','fo,kd,f,g ,g')
        ['fo', 'kd', 'f', 'g', 'g']


    13.匹配任意（非数字字符）

    元字符： \d \D
    匹配规则：  \d 匹配任意数字字符  [0-9]
                \D  匹配任意非数字字符  [^0-9]

    eg:匹配手机号

        '1[\d]{10}'

    14.匹配任意(非)普通字符

    元字符： \w \W
    匹配规则; \w  匹配任意普通字符
            \W    匹配任意非普通字符
注意：  普通字符指： 数字 字母 下划线 和 普通utf8字符
    eg:

    >>> re.findall(r"\w+","PORT#1908 44% 下降")
    ['PORT', '1908', '44', '下降']
    >>> re.findall(r"\W+","PORT#1908 44% 下降")
    ['#', ' ', '% ']

    
    15.匹配任意（非）空字符

        元字符：  \s   \S
        匹配规则：匹配 \s 匹配任意空字符[\r\n\t\v\f]
                    \S  匹配任意非空字符


        eg:
        >>> re.findall(r"\s+","PORT#1908 44% 下降")
        [' ', ' ']
        >>> re.findall(r"\S+","PORT#1908 44% 下降")
        ['PORT#1908', '44%', '下降']



    16.匹配子符串开头结尾位置

    元字符：  \A  \Z
    匹配规则： \A 匹配字符串开头  ^
             \Z   匹配字符串结尾  $

    >> re.findall(r"\A\d+-\d+\Z","1000-1500")
        ['1000-1500']    
    

    17.匹配（非单词边界
    元字符：  \b   \B
    匹配规则：  \b  匹配单词边界位置
                \B 匹配非单词边界位置

    注意; 数字字母下划线 普通utf8字符和其他字符的交界位置
        >>> re.findall(r"\bis\b","this is a test")
        ['is']


    元字符总结

    匹配单个字符： . [...]   [^...]  \D \d \w \W \s \S 
    匹配重复    * + ?  {n}  {m,n}
    匹配位置    ^  $ \A  \Z  \b \B
    其他  | ()  \

正则表达式转义
    在正则表达式中，如果想表达特殊符号本身则要用转义字符，即在特殊符号前加入\表达其本身字符
    特殊符号    . *  + ? ^ $ [] () |\
    eg：
        "MR.L" 让 .  没有元字符含义  "MR\.L"

        目标字符串   正则表达式         python字符串
        "$10"              \$\d+        "\\$\\d+"


    raw字符串  ---》 原始字符串
    特点：  字符串内容为原样表达，不进行转义解析
    eg 
            r"\$\d+"  ==>"\\$\\d+"


    贪婪 和 非贪婪

    贪婪模式：
        正则表达式中的重复匹配默认总是尽可能多得向后匹配更多的内容

        涉及元字符  * + ? {m,n}

    非贪婪(懒惰)模式：尽可能少的重复匹配内容
        贪婪---》;   *？ +？ ？？ （m,n）?
        >> re.findall(r'a.*?b',"acb,alb,afb")
        ['acb', 'alb', 'afb']
        >>> re.findall(r'a.*b',"acb,alb,afb")
        ['acb,alb,afb']

    正则表达式分组

    使用（）可以为正则表达式内部建立若干分组，子组为正则表达式的一部分

    子组特点
    1.一个正则表达式内部可以有多个分组
    2.分组后正则表达式仍然是一个整体去匹配目标字符串，不会使用分组单独匹配
    3.分组一般由外到内，由左到右计数，不会重叠


    子组的作用：


        1.将分组作为一个整体，改变元字符的操作对象
        2.

    >>> re.search(r'(ab)+\d+','ababab1234').group()
        'ababab1234' 

        re.search(r"\w+@\w\.(com|cn)",'abc@123.com').group()
        'abc@123.com'



    2.可以通过函数单独提取子组的对应匹配内容
    >>> re.search(r"(http|ftp|file|https)://\S+","http://www.baidu.com").group()或者(1)
        'http://www.baidu.com'

    3.可以通过命名注释子组含义 让结构分明
        * 子组分为捕获组合非捕获组，捕获组即定义了名称的子组

        格式：  (?P<name>patter)

    >>> re.search(r"(?P<piglet>ab)cde","abcdefghg").group()
    'abcde'
    
    eg 身份证号
    re.search(r"\d{17}(\d|x)",'1561161615511555131').group()


    正则表达式设计原则
        1.正确性  能够正确的匹配目标字符串
        2.排他性   除了要匹配的内容  尽可能不匹配到其他内容
        3.全面性，尽可能对目标字符串各种情况考虑全面不遗漏


re 模块使用
        regex = compile(patten,flags = 0)
        功能：生成正则表达式对象
        参数：pattern 正则表达式
                flags 功能标志位，丰富正则表达式的匹配功能
        返回值： 返回正则对象

    re.findall(pattern,string,flags)
    功能：从目标字符串匹配所有正则内容
    参数：  pattern 正则
            string  目标字符串
            flags  功能标志
    返回值; 返回匹配到的内容列表
            如果正则表达式有子组则只获取子组对应内容

 

    
    regex.findall(string,pos,endpos)
    功能：从目标字符串匹配所有正则内容
    参数：  string  目标字符串
            pos 对目标字符串截取的起始位置  默认开头
            endposs 对目标字符串截取的结束位置 默认结尾

    返回值; 返回匹配到的内容列表
            如果正则表达式有子组则只获取子组对应内容


    re.split(patter,string,flags)
    
    功能; 使用正确表达式匹配内容切割字符串
    参数：pattern 正则
         string  目标字符串
    返回: 列表  切割后的内容


    re.sub(pattern,replaceStr,string,max,flags)
    功能：使用字符串替换正则匹配内容
    参数：pattern  正则
        replaceStr  替换的子符串
        string 目标字符串
        max  替换几处  默认全部替换
        返回值：返回替换后的字符串
    
    
    
    
    subn()  与sub相同  多返回一个替换个数
    返回值：一个元祖 ，前面是替换后的内容，后面是替换了几处





    re.finditer(pattern,string,flags)
    功能：查找正则表达式匹配内容
    参数：pattern 正则
            string  目标字符串
            flags
    返回：一个迭代对象


    re.fullmatch(pattern,string,flags)
    功能：  完全匹配目标字符串
    参数：  pattern 正则
            string  目标字符串
            flags
    返回： 返回匹配到的内容 失败返回None
 
    re.match(pattern,string,flags)
    功能： 匹配目标字符串开始位置
    参数：  pattern 正则
            string  目标字符串
            flags
    返回： 返回匹配到的内容 失败返回None
   
   
   
   
    re.search(pattern,string,flags)
    功能： 匹配目标字符串第一处匹配内容
    参数：  pattern 正则
            string  目标字符串
            flags
    返回： 返回匹配到的内容 失败返回None
   
   

作业：
1.熟记正则表达式元字符
2.使用regex对象复习re模块调用的函数
3.找一个文档使用正则表达式匹配：
    【1】 所有以大写字母开头的单词
    【2】 所有的数字 包含整数 小数  负数  分数
        百分数














































