


上次内容

子查询
    select * from acct where balance >（select avg（balance） from acct)

连接查询 ：多个表中查询数据 产生一个结果集
    当想查询的结果来自不同的表时 用到联合查询
    -笛卡尔积：集合的乘积 
    连接 内连接和外连接
    内连接：没有关联到的数据不显示
    外连接：
        左连接：已左表为主表 全部显示 右表来关联
权限管理
    -授权语法
    grant 权限列表 on 库.表
    to 用户@客户端
    【identified by ‘密码’】
    【with grant option】 
    权限
    all privileges ，
    库.表 *.*     bank.*        bank.acct
    客户端： %  localhost           xxx.xxx.xx
    查看自己的权限
        show grants
    查看别人的权限
        show grants from 用户@客户端
    吊销权限
        revoke 权限列表 on 用户@客户端
4.数据库事务 
    启动事务：start transaction
    事务特征：原子性 一致性 隔离性 持久性（隔离性为事物之间不相互影响）
    结束：commit
    回滚：rollbacke



今天的内容


1.锁
    1）锁：对数据库的控制权
    2）目的：解决多个工作单元并发操作数据的正确性
    3）分类
        a）锁类型
        -读锁（共享锁）：加锁后 可以读取 但不能修改
        -写锁（排他锁）：加锁后，不能进行读写
        b）锁粒度
            -行级锁（细粒度）;确定一行 并发效率高
                控制较为复杂 消耗资源多

            -表级锁（粗粒）：锁定整张表 并发效率低
                控制简单 消耗资源较少

2.存储引擎
    1）什么是存储引擎;表的存储方式 包括：存储机制
        索引机制、锁定方式
    2）基本操作
        -查看支持的存储引擎：show engines；
        -具体到某一个表  show crate table  表名
        -建表时指定存储引擎
            create table t1（
            name  varchar（32），
            ）engine=InnoDB；
            -修改表的引擎：
            alter table t1 engine = MyISAM

    3）常用存储引擎的特点
        a）InnoDB
        -支持数据库事务 行锁定 支持外键（FK）
        -共享表空间
            表名.frm:表结构和索引
            表名.ibd：表记录

            * 通过 show global variables ’%datadir%‘
            查看mysql表存储的文件目录
            -使用场合
                更新密集操作的表 并发效率高
                要求支持数据库事务
                要求要支持外键约束
                要求支持自动增长 auto_increment 字段


        b）MyISAM
        -支持表级锁定 不支持事务 不支持外键
            不支持行锁定  访问速度较快
        -独享表空间
            表名.frm：表结构
            表名：myd：表数据
            表名：myi：表索引
        -适用场合
            查询操作较多
            数据一致性要求较低（不支持事务）
            没有外键的约束
        c）Menory（内存表）
            -表结构存储在磁盘上 数据存储在内存
            访问速度快
         乌班图下 所有启动程序都在etc下有启动脚本  sudo /etc/init.d/mysql restart（etc还是ect 不详 谨慎使用）
            -文件：表名.frm 存储表结构
            -服务（或机器）重启后  表中的数据丢失
            -适用场合：
            数据量小访问速度要求极快 访问频率高
            数据丢失后不会造成影响

3.E-R模型：实体关系模型
    a）实体（Entry）：现实中可以区分的事物称之为实体
    b）关系（Relationship）：实体之间的联系
        -一对一
        -一对多
        -多对多
    c）属性：实体所具有的数据特征
    d）E-R图：用图形化方式 表达实体间的关系
        矩形：表示实体
        椭圆：实体的属性
        菱形：实体间的关系
            一对一：菱形左右各写一个1
            一对多：左右分别为1 n
            多对多：左右用mn来表示


4.使用python访问MySQL
    1）pymysql库 ：python语言访问Mysql接口
    -安装：
    在线：sudo pip3 install pymysql
    离线：
        第一步：要下载安装包
            下载地址：https://pypi.org/project/PyMySQL
                    PyMySQL -0.9.3.tar.gz
        第二步：解压包
            tar -zxvf PyMySQL -0.9.3.tar.gz
            cd PyMySQL -0.9.3.tar.gz 目录
            python3 setup.py install 
        验证方式： 进入py交互模式 执行导入包操作
            import pymysql

            如果不报错 则说明安装成功
    2)PyMySQL访问MySQL的流程
    第一步： 导入pymysql模块
    第二步： 建立到数据库服务器的连接 创建连接对象
    第三步： 创建游标对象（cursor） 通过调用数据库连接对象获得游标
    第四步： 利用cursao对象 执行sql语句 
    第五步： 提交事务（如果需要）
    第六步：关闭游标对象
    第七步：关闭数据库连接对象

python -m pip install pymysql
3)PyMysql 模块的主要方法
    -connect
host   服务器地址
            port   服务器端口(省略连默认段)
            user   用户名
            passwd 密码
            db     数据库名称
              harset指定编码格式

    -连接对象支持的方法 
        cursor()     获取游标
        commit()       提交事务
        rollback()  回滚事务
        close()    关闭游标
    -游标对象支持的方法
        execute(sql)  执行sql语句
        fetchall（）   取得查询结果集中的所有数据
        fetchone（） 取查询结果集中一笔数据
        fetchmany（size）取得指定笔数数据
        close（）    关闭游标对象


    属性：
        rowcount    返回修改影响的行数
        


5.sql语句优化
    1）在经常查询 排序的字段上建立索引
    2）尽量少使用不等于条件判断  不等于判断会放弃使用索引
    3）少使用null判断 null值判断会使用索引
    4）条件判断少使用or       in      not in
    5）模糊查询避免%前置
    6）查询时如果是select *，直接写成字段名会提高效率
    7）尽量少在where子句中使用字段进行运算 例如
        select * from acct where balance / 2 > 5000
    8)数值类型的字段  进行条件比较时 一半比字符串效率更高
    9）















































