回顾
1. 约束(constraint)
    1) 数据库层级对数据添加的规则,维护数据一致性,完整性、正确性
    2) 类型: 非空、唯一性、主键、默认值、自动增加、外键约束
2. 索引
    1) 提高查询效率的技术，避免全表扫描
    2) 优缺点
        - 优点: 提高查询效率
        - 缺点: 增加额外存储空间,降低增删改效率
    3) 注意事项
        - 使用恰当索引，并不是越多越好
        - 适合使用索引的情况
            - 经常查询的字段
            - 数据分布相对较连续,均匀
            - 经常用于排序的字段
        - 不适合建立索引
            - 经常不查询的字段
            - 字段的值较少
            - 表的数据量很少
            - 二进制的数据格式
3. 导入导出
    1) 导出: select * from acct
                into outfile "文件路径" -- secure_file_priv
              fields terminated by "字段分隔符"
              lines terminated by "行分隔符"

    2） 导出: load data infile "文件路径"
                into table "表名"
                fields terminated by "字段分隔符"
                lines terminated by "行分隔符"

4. 表的赋值、重命名
    1) create table 表名称 查询语句
    2) alter table 原表名称 rename to 新表名称



第四天



1.子查询（一个查询中 包含另一个查询）（重点）
2.连接查询（两个表中或多个 查询返回一个结果）（重点）
3.权限管理
4.数据库事物（重点）

1.子查询
    1）什么是子查询：查询语句中包含另外一个查询
     也叫嵌套查询
     例如：查询过交易的账户信息 
        select * from acct where acct_no in (select distinct acct_no from acct_trans_detail);
    说明：括号中的部分称为子查询  先执行子查询 返回一个结果集
          再执行外层查询
          子查询返回的结果，要和外层查询的条件匹配
          子查询只执行一次
    2）使用子查询的情况
        -一个查询 语句无法实现
        -一个查询 语句实现不方便 不直观

    3）单表子查询
        -示例：查询所有余额大于平均余额的账户

        select * from acct  where
        balance > （select avg（balance）from acct）； 

    4）多表子查询
        -示例1：查询所有发生过交易的账户信息
        select * from acct where acct_no in (
            select distinct acct_no from eshop.acct_trans_detail
        );
        示例2：查询所有未发生过交易的账户信息
         select * from acct where acct_no not in(
            select distinct acct_no from acct_trans_detail
        )；
        
        
        示例3：查询所有发生过大金额交易的账户信息
      
        select * from acct where acct_no  in(
            select distinct acct_no from acct_trans_detail where amt >1000
        )；
2.连接查询（联合查询）
    1）笛卡尔积
    -定义：两个集合乘积 每个集合中元素两两组合 产生的新集合
    -意义；产生两个集合所有可能的情况组合
    A：学会集合         B：课程集合
    A和B的笛卡尔积表示所有学生可能的选课情况

    A：所有的生物   B：所有的韵母
    A和B的笛卡尔积表示所有可能的拼音组合


    -笛卡尔积和关系（二位表）：
        笛卡尔集中可能含有不存在（没有实际意义）数据去掉这部分数据就是关系
        例如：查询过交易的账户信息  bun在汉语拼音中不存在 应该去掉

    2）连接查询
    -什么是连接查询：将两个（或以上）的表连接起来 得到一个新表    
                                    （也可以叫表的连接）
    - 什么时候使用连接查询;当从一个表中无法获得所有想要的数据时候，使用联合查询
       * 通过字段关联 如果关联到数据则显示
       如果未关联到数据 则不显示
       这种连接查询称之为内连接
3.连接分类
- 内连接;关联到的数据显示 没有关联到数据不显示 
        格式：select 字段列表 from 表A
        inner join 表B
        on 关联条件

    示例；
        select a.acct_no, a.acct_name, c.tel_no
        from acct a
        inner join customer c
        on a.cust_no = c.cust_no




- 外连接：没有关联到的数据也显示
        （指定哪个表的数据全部显示）

    左连接：左表为主  左表的内容全部显示  右表匹配 
    左连接格式：
        select 字段列表 from  表A
        left join 表B
        on 关联条件
    示例： 查询账户  户名   客户电话   如果账户对应的客户部存在 也要显示账户 户名
        select a.acct_no, a.acct_name, b.tel_no
        from acct a
        left join eshop.customers c                     left   换成 right   为右连接
        on a.cust_no = c.cust_no

3.权限管理
    1）权限：用户可以进行哪些操作               select * from user where user = 'root'\G
    2）分类：                                          
    -用户类：创建用户 删除用户 给用户授权
    -库操作： 创建库 删除库
    -表操作：创建表 删除表
    -数据操作：增 删 改 查
    3）权限表
        - user：最重要的权限表，记录了允许连接到服务器的用户及具有的权限
        - db：记录库的授权信息
        - tables_priv：记录表的授权信息
        - columns_priv：记录字段的授权信息

    5）授权
        -语法;
            grant 权限列表 on 库名称.表名称
            to '用户名'@'客户端地址'
            [identified by '密码']
            [with grant option](允许向其他用户授权)
        -说明;
        权限列表 ： 被授权用户拥有哪些权限
         all privileges:所有的权限
         select, insert, update, delete: 分别指定的权限
       - 库名称.表名
        *.* 表示为所有库、所有表
        bank.*（表示对bank库下所有的表授权）
        bank.acct 特指bank库下acct这个表

        -客户端地址
        %     表示所有客户端
        localhost  表示本机
        192.168.1.5 表示指定192.168.1.5这台机器

    示例 给Daniel 用户授权所有库 所有表的权限 并且将密码设置为123456  允许该用户向其他用户授权
            grant all privileges on *.*
            to 'Daniel'@'%'
            identified by '123456'
            with grant option;         -- (允许向其他用户授权)
        执行成功后 重新加载权限设置
        flush privileges


    给 Tom授权
    grant select on *.*
    to 'Tom'@'localhost'
    identified by '123456'  查询可以  其他拒绝

   
查看自己的权限  show grants
查看其他用户（用户权限足够）show grants for 'Tom'@'localhost';

6）吊销权限
-语法：revoke  权限列表 on 库名.表名
    from '用户'@'客户端地址'

示例 吊销jerry用户bank库下的delete权限
    revoke delete on bank.*
    from 'Jerry'@'%';


--------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
4.数据库事务（重点）
    1)什么是事务 （Transaction）：数据库的一系列操作
        要么全部成功 要么全部失败
    2）作用： 保证数据一致性 正确性

        例如： 0001 向 0002 账户转1000元钱
              0001 减去1000元
              0002加上1000元

            以上两个操作 要摸全都执行 要摸全都不执行
    3)使用事务的场景
        -对数据进行修改
        -如果修改成功 则提交事务 所有的修改都被保存    失败则回滚
            所有的修改都被撤销
    4）MySQL中 启用事务的表必须是InnoDB存储引擎 

    5)事务特征 ACID特征
    -原子性(Atomicity)
    事务是一个整体  要么全部执行 要么全都不执行
    -一致性（Consistency）
    事务执行完成后 从一个一致性状态
    变成另一个一致性状态
    -隔离性（Isolation）
    事务之间不相互影响 干扰
    -持久性（Durability）
    事务一旦提交 对数据库的修改就必须持久保
    
    6）MySQL中操作事务
    -启动 start transaction
    -提交; commit              
    -回滚：rollback
    示例：利用事务控制转账操作

        第一步：利用事务控制转账操作
        start transaction
        第一步：修改转出账户yue 
       
        update acct set balabce = balance - 1000 where acct_no = '6223450000001'
        第三步 修改转入账户余额
        update acct se他balabce = balance + 1000 where acct_no = '6223450000002'
        第四步：提交事务
        commit；
        第一次：四个步骤全部执行
        第二次，执行前两个步骤，然后rollback回滚

            在回滚之前新登入一个客户端查询数据



练习
使用eshop库完成如下操作
1.利用子查询 查询所有订单状态为‘申请退货’的客户的名称 电话号码

select cust_name, cust_tel from customers 
where cust_id in(
select distinct cust_id from orders where status = '5' 
);




2.利用连接查询 查询状态为代送货订单的信息
    查询结果包含的字段有：
    订单便号  下单时间   客户编号 客户信息  送过地址（分别来自订单表 客户表）

select o.order_id, o.order_date,
c.cust_id, c.cust_name, c.address from orders o
inner join customers c
on o.cust_id = c.cust_id
where status = '2';


select o.order_id, o.order_date,
c.cust_id, c.cust_name, c.address from orders o，
customers c
where status = '2';
and on o.cust_id = c.cust_id













3.创建esop_admin用户 并授权
    1）eshop库所有表 所有有权限
    2）允许从任意客户端登陆
    3）设置密码

grant all privileges on eshop.*
to 'esop_admin'@'%'
identified by '123456';





4.创建eshop_user 用户 并授权
    1）eshop库所有表的查询权限
    2）允许从任意客户端登陆
    3）设置密码

grant select on eshop.*
to 'esop_user'@'%'
identified by '123456';










