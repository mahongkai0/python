

1.tcp 传输的一些特征
* 传输特征
* 网络缓冲区


2.udp传输
    服务端 创建套接字  绑定地址    发送接受   关闭
    客户端 创建套接字   首发消息   关闭


3.套接字属性
    fileno（）
    getpeername（）
    setsockopt（）


#####################################

http响应（response）

响应格式
    响应行：  反馈基本的响应情况
        格式：HTTP/1.1   200   OK
              协议版本   响应码 附加信息
            
            响应码：代表不同的情况  
            1xx  提示信息  表示请求被接受
            2xx     响应成功
            3xx     响应需要进一步操作 重定向
            4xx     客户端请求错误
            5xx     服务器未知异常



    响应头： 对响应信息的基本描述
            Content-Encoding: gzip
            Content-Type: text/html

    
    空行

    响应体： 要给客户端回发的内容

要求 什么是http协议 是那一层  用tcp传输还是udp
    http常见的应用场景：网页传输　　数据传输
    网页获取的流程
    http协议的请求和响应的格式及每部分功能
    常见的请求类型和响应码含义


IO类型
在内存中存在数据交互的操作都去人是IO操作
和终端交互： input print
和磁盘交互： read write pymysql
和网络交互：resv send


计算密集型程序（cpu密集）：程序中计算较多  IO操作较少 cpu消耗大 运行速度快
IO密集型操作：在程序执行中存在大量IO操作 而CPU运算较少 cpu消耗很低 耗时较长

IO 分类
阻塞IO 非阻塞IO  IO多路复用    （异步IO）  （时间IO）

阻塞IO
    阻塞IO是IO的默认形态，是效率较低的一种IO情形

    阻塞情况：
    *因为某种条件没有达成的函数阻塞
            e.g            accept  recv      recvfrom  input
    * 因为处理IO事件较长形成的阻塞行为
            e.g 网络延迟 大文件读写


    非阻塞IO 
        * 将原本阻塞的IO函数通过设置属性使其变成非阻塞
  #############################################################################################################      
        sockfd.setblocking(bool)
        功能：将套接字设置为非阻塞IO
        参数：默认为True 表示为非阻塞
             设置为False 则表示为非阻塞状态则sockfd 调用函数时不阻塞

超时检测： 机设置一个最长的等待时间 超时则不再阻塞等待
######################################################################################################################
sockfd.settimeout（sec）
功能：设置套接字的超时检测时间
参数： 时间  秒
*  早阻塞状态下设置超时检测

IO多路复用

定义：同时监控多个IO事件 当哪个IO事件准备就绪就执行哪个IO事件 以此形成可以同时操作多个Io的行为 避免一个IO阻塞
    造成其他IO都不可执行的形态，提高IO运行效率
就绪IO：表示一种临界状态 即该IO已经发生  由内核交由应用程序处理

具体方案：
    1.系统支持 
    select： window linux inux
    poll  linux unix
    epoll  linux
    2.python 实现
    import select

select方法           通俗来讲 三个参数全是列表
rlist, wlist,  xlist = select（rlist，wlist，xlist【，timeout】）
rs     ws       xs    
功能：监控IO事件  阻塞等待IO事件发生
    参数：   rlist  列表  想要关注的等待发生的IO事件
            wlist   列表  想要关注的可以主动处理的IO
            xlist   列表 想要关注的出现异常处理的IO
            timoeout （超时时间）

    返回值：
            rs  列表    rlist中准备就绪的事件
            ws  列表    wlist中准备就绪的事件
            xs  列表    xlist中准备就绪的事件


    基于select IO多路复用的tcp服务端

    步骤： 1.将关注的IO放入对应类别的列表
           2.通过select函数进行IO监控
           3.当IO事件发生时遍历select返回值列表
           4.处理发生的IO

        注意：wlist 中如果有IO时间 则会立即返回到返回值中
            在IO处理中不宜出现死循环等长期占有服务端的情况
            IO多路复用占用计算机资源较少效率较高

11     1011
14     1110

位运算
    &   按位与   有0则0                  11&14       1010    10
    |      按位或 有1则1              11|14   1111     15    
    ^       按位异或 相同为0                   11^14 0101   5
    <<          左移   如 11<<2  101100   44   向左右侧补0         
    >>  右移     向右移动去掉地位     14 >> 2   11    3

作业：  1.熟练select服务端程序
        2.熟练httpserver
        3.复习 类  （继承，super, __init__）      
        4.编写一个select服务端，要求监听客户端的连接，客户端发送的内容，以及从终端输入的内容，将客户端发送
        过来的内容那个和终端输入的内容全部备份到一个文件里
             sys.stdin   标准输入流
                
























