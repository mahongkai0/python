
进程间通信

共享内存 在内存中开辟空间 只能存一组数据 效率高

        Value   存放单一数据
        array  存放一组数据


信号量  Semaphore（）创建信号量
        acquire（） 消耗
        release（）增加

2.创建多线程
    threading --》 Thread
    
    t.daemon 主线程退出后分支线程是否退出

线程的同步互斥
Event（）
e.set（） e.wait（） e.cleat（） e.is_set（）




****************************************************************************************************************

进程的优缺点
    优点：1.可以利用计算机多核资源进行并发处理
          2.空间独立 数据安全性好
          3,有专门的进程间通信方法，通信方便
    缺点：
          1.进程创建删除过程中消耗资源较多
        2. 大量的进程需要的计算机资源也比较多

线程的优缺点:
   优点：1.创建删除过程中消耗资源较少
        2.使用全局变量 通信方便
        3.也能利用计算机多核进行并发操作

    缺点：
        1.通信过程中往往需要同步互斥机制逻辑复杂
        2.空间不要独立 数据容易被修改
        3.python线程有GIL问题
进程线程的练习

        1.两者都是多任务编程方式 都能使用计算机多核
        2.一个进程可以包含多个线程分支
        3.多个线程共享进程资源
        4，进程线程在系统中都有自己的特有属性 如ID等


使用场景
     *如果某个任务并发比较多  此时多线程消耗资源较少
     * 不同的独立任务模块 使用多进程比较好管理 
     * 在通信和数据处理上考虑可行性 如果同步互斥操作笔比较复杂 此时多线程可能容易出错


    要求：进程线程的区别联系
        进程间通信都知道哪些 有什么特点
        什么是同步互斥  你在什么情况下使用
        给一个情形 分析使用进程还是线程 为什么
        可能会问到一些概念  比如 僵尸处理  进程状态转换 python线程效率 粘包处理

1.什么是服务器
        
        硬件服务器：主机    集群

        软件服务器：编写的服务端应用程序，在硬件服务器系统上运行，提供一定的完整的后端功能

        前端    用户端   客户端     前台
            特征：用户直接交互，提供给用户使用
            要求：良好的用户体验

        后端    服务端     后台
            特征：提供逻辑处理，数据处理，满足前端请求
            要求：更高的并发量，更快的处理速度，更强的安全性

    软件服务器分类

        按照功能：httpserver --> 处理HTTP请求
                 webserver --> 提供网站后端服务
                 邮箱服务器 --> 提供邮件处理
                 ftp服务器 --> 提供文件上传下载服务

        按照结构：C/S 架构   客户端服务器模型
                 B/S 架构   浏览器服务器模型 


        网路通信模型
                1.循环服务器模型 ：循环接受客户端请求 处理请求
                同一时刻只能处理一个请求 处理完毕后再处理下一个


        优点; 实现简单 占用资源少
        缺点：无法同时处理多个客户端请求

        使用情况：
                处理的任务可以很快完成 不会长期占有服务器  且访问量较小   UDP比TCP更适合循环模型



                2.
                并发服务器模型
                能够同时处理多个客户端请求

                IO并发： IO多路复用 协程
                        优点：资源消耗少 能够同时处理多个IO

                        缺点:只能监控IO事件 无法处理cpu运算

                        适用情况：后端对IO的并发处理

                多进程/多线程并发： 为每个客户端单独创建进程/线程
                        优点： 每个客户端都可以长期占用服务器
                        缺点： 消耗资源较高


多进程并发
        基于fork完成多进程网络并发
        1.创建套接字 ，绑定，监听
        2.等待客户端连接  accept
        3.当有新的客户端连接，创建子进程处理客户端请求
        4.原有进程继续等待其他客户端连接
        5.如果有客户端退出，销毁对应的进程











