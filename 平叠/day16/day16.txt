生成器
动态提供数据的对象 （现用现生成）
两种生成器
1.生成器函数
    def myyiled（）：
        yield 1
        yield 2
    yield 语句
        yield 表达式
    访问生成器的方式 
    1..迭代器
    2.for

2生成器表达式
    语法：
        （x ** 2 for x in range(10) ）
迭代共具函数
zip （可迭代对象 1，可迭代对象2 ）
enunerate（可迭代对象，start = 0） # (索引，值）
 

不一定所有字符串都可以转换为字节串


字节数组的方法
B.clear（）请空
B.append（） 追加






day16


文件 file
    什么是文件
    文件用于数据存储的单位
    文件通长长期用来存储数据
    文件中的数据是以字节为单位进行顺序存储的

文件的操作流程
    1.打开文件
    2.读写文件
    3.关闭文件
注'任何的操作系统，一个应用程序同时打开文件的个数有最大数限制
文件的打开函数
函数：
    open（filename，mode = ‘rt’） 用于打开一个文件
    参数：
    filename 文件的路径名字符串（可以是绝对路径和相对路径）
mode 打开模式
    'r' 只读
    'w' 只写
    't' 文本
返回值
    文件流对象
说明：
    打开文件出错时会触发0SError类型的错误

文件的关闭方法

方法名：
    f.close（）
示例见：
    file_open.py


文本文件读方法
    F.read（n） #读取n个字符数据（文本方式）或字节数据（二进制方式）
                当读到文件尾返回空字符串或字节串
    F.readline（） 读取一行以‘\n’  结束
    F.readlines（）  读取多行 返回列表

示例见
    file_read.py


文本文件的写操作
    方法
    f.write（字符串或字节串）
    作用：
        写入字符串（文本文件操作）或字节串（二进制文件操作）到文件中
    返回值
        成功写入的字符个数或字节个数
    方法2
        f.writelins（字符串或字节串列表）
打开模式
    ‘w’ 只写并创建文件
    ‘x’ 只写 只创建新文件，文件存在则报错
    ‘a’ 追加方式写文件


示例见“

文本文件操作
    模式字符： 't'
说明：
    1.对文本文件的读写要用字符串（str） 进行读取和写入数据
    2.默认文件中存储的都为字符数据，在读写中会自动进行编码转换
    3.以行为单位分隔，在python内部统一用‘\n’作用为换符进行分隔
各操作系统的换行符
    Mac OS X / Linux换行符: '\n'
    Windows 换行符：'\r\n'


文件的迭代读取：
    文件流对象是可迭代对象，迭代过程将以换行符‘\n’ 作为分割符依次获取
示例见：
    f= open（"myfile.txt"）
    for line in f:
        print(line)  # 每次line绑定一行数据
    f.close()

标准输入输出文件”
    模块  ：sys
    sys.stdin   标准  输入文件（默认是建盘）
    sys.stdout  标准输出文件（默认是终端输出）
    sys.stderr  标准错误输出文件（默认是终端输出）
示例见
    stdout.py

说明：
    标准文件不需要打开和关闭就可以使用

二进制文件操作
    二进制文件模式字符: 'b'
什么是二进制文件操作
    默认文件中存储的都是以字节（byte）为单位的数据 通常有人为的格式

说明：
    对二进制文件的读写需要用字节串（bytes）进行操作
    如： 后缀  ‘rb’

示例见：
    file_read_binary.py

print 实现
见示例

F.seek方法
作用：
    设置文件的读写位置
方法：
    F.seek（偏移量，whence=相对位置）
参数：
    偏移量
        大于0的整数代表想文件末尾方向移动
        小于0代表向文件头方向移动
相对位置：
    0 代表从文件头开始偏移
    1 代表从当前位置开始偏移
    2 代表从文件尾开始偏移
示例见
    seek.py


F.flush  方法
作用：
清空（清倒）缓冲区



汉字编码：
    两种（常见）：
    国标系列
    GB18030  (二字节或四字节编码，27533个汉字)
        GBK （二字节编码，约21003个汉字）
            GB2312（二字节编码，约7000个）（A1A1-FEFE）
    （windowse常用）
国际标准   UNICODE    <----->  UTF-8
    (linux  unix  Mac OS  IOS  Android  常用)

b = b'\x65\B0\B8'
b.decode('gbk')
b

UTF-8(8-bit Unicode Transformation Format)
UNICODE  <---------> UTF-8


0x0000-0x7F    1字节编码（与ASCII兼容）
0x0080-0x-7FF  2字节编码
0x07FF-0xFFF   3字节编码（汉字落在此区）
0x10000之后    4,5,6，字节编码（UNICODE32部分）



python的编码（encode）字符串
'gb2312'
'gbk' 
'gb18030'
'utf-8'
'ascii'


编码注释
    在python源文件的第一行或第二行写入的如下内容是编码注释
    编码注释的作用是告诉解释执行器当前文件的编码类型是什么
    如：
        # -*- coding：gbk-*-
        #告诉python解释执行器，当前文件的编码是：gbk
        或：
        #-*- coding：utf-8 -*-

































































































