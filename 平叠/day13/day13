day12回顾
ctrl  +   鼠标左键 跳转

装饰器 decorators
 本身是一个函数 通常是带有一个参数的函数

语法
def   装饰器函数（fn）：
    #创建一个闭包函数
    def fx（形参列表同被装饰函数的形参列表）：
        ...
        fn（）  #内部调用fn
        ...
函数的字符串
def fa（）：
    ‘’‘这是函数的文档字符串’‘’
fa.__doc__属性          
用于绑定函数的文档字符串
模块  module
模块包含  ： 函数  数据 类

导入方式
import 语句
    在当前作用域创建一个变量来绑定 模块 
from import 语句
    在当前作用域创建一个或多个变量来绑定模块里的函数或数据
from impor * 语句

    语法：
        from 模块名 import *
    作用：
        将某模块的所有属性导入到当前模块

内建模块
    math 模块
    time 模块





day13 笔记

sys 模块
    此模块记录运行时系统相关的信息
    文档参见 

sys.moudules 已加载的字典
sys.version 版本信息字符串
sys.version_info  版本信息的命名元组
sys.argv 命令行参数argv【0】代表当前脚本程序路径名

sys.exit()   让程序直接退出 括号里默认为0



自定义模块
    要求 
        模块文件名后缀必须以.py结尾
        模块文件名必须是合法的标示符
        避免名称和内建模块名冲突
导入方式
    import 语句
    from import 语句
    from import * 语句

import 语句搜索模块的路径顺序
    1.搜索 内建模块
    2.搜索程序运行时的路径（当前路径）
    3.搜索sys.path提供的路径
    sys.path 绑定一个列表  里面放的都是模块的搜索路径
    import sys
    print(sys.path)

模块化编程的优点：
    1.有利于多人合作开发
    2.使代码更易于维护
    3.提高代码的复用率（模块可以同时被很多模块导入）
    4.模块化编程有助于解决函数名和变量名冲突（重名），模块内的
        变量作用域在模块内为全局
    


模块的加载过程
    在模块导入时 模块的所有语句都会执行
    如果一个模块已经导入  则再次导入时不会重新执行模块内的语句   （哪怕改变源码（交互））

模块的重新加载 
示例：
    import mymod
    import imp
    imp.reload（mymod）   ###重新导入mymod模块


模块被导入和执行的过程
    1.先搜索相关的路径
    2.判断是否有此模块对应的.pyc文件 如果要有.pyc文件  且.pyc文件比.py文件新，则直接记载.pyc文件
    3.否则先用.py文件生成.pyc文件  然后再加载pyc文件

pyc 模块的编译文件（python compile）
        编译
    mymod .py ----->mymod.pyc ------->python3

模块的属性
    1.模块的文档字符串
        模块内第一次没有赋值给任何变量的字符串是模块的文档字符串
    模块的文档字符串绑定在模块的__doc__属性上  __doc__  这个也算变量
    2.模块的__file__  属性上
    用于绑定模块的路径                 记录文件在哪
    如：
    import mymod
    print(mymod.__file__)             # /home/tarena/../mymod.py（输出记录文件在哪）

    3.模块的__name__属性
     用来记录模块自身的名字
     作用：
     1.记录模块名
     2.用来判断当前模块是否是主模块
    说明：
       1. 当此模块作为主模块是（也就是它是第一个运行的模块）运行时，__name__绑定 '__main__'
       2.当此模块不是主模块 则是被其他模块导入时  此属性绑定模块名 
        即
         xxx.py 的模块名为 xxx
         示例见
         mymod.py



模块内的__all__ 列表
    模块中的__all__列表是一个用来存放可导出属性的字符串列表

作用：
    当用from xxx import * 导入时  只导入__all__  列表内的属性
示例见

注 __all__  列表只对 from mymod2 import *


模块的隐藏属性 只对from mymod2 import *有效
    模块的中下划线（_） 开头的属性 在from xxx import * 语句
    导放时将不被导入  通常称这些属性为隐藏属性

示例见：
    mympd3.py


随机模块 random
    作用：
    用于模拟或生成随机输出的模块
    文档参见


包（模块包）  package
    包是将模块以文件夹的组织形式进行分组管理的方法
包的作用：
    将一些列模块进行分类管理  有利于访问命名冲突
    可以在需要时加载一个或部分模块而不是全部模块
包示例：
mypack/                     / 为包      .py为文件  缩进 为包含关系
    __init__.py
    menu.py
    games/
        __init__.py






包的导入语法：
    同模块的导入规则
    imoport 包名 [as 包别名]
    import 包名 模块名 [as ，模块新名]
    import 包名 子包名  模块名 [as 模块新名]
    ...
    from 包名 import 模块名 [as ，模块新名]
    from 包名 子包名 import 模块名 [as ，模块新名]
    from 包名 子包名 模块名 import 属性名 [as ，模块新名]
    ...
    from 包名 import * 
    from 包名.模块名 import *
    from 包名 子包名 模块名 import * 


from mypack.games.tanks import play
play()


import mypack.games.tanks play
mypack.games.tanks.play



import 语句搜索包的路径顺序
1.搜索程序的运行路径（当前工作目录）
2.搜索sys。path提供的路径

__init__.py 文件
    __init__.py 是常规包内必须存在的文件
    __init__.py 会在包加载时自动调用
作用：

    编写此包的内容
    在内部填写包的文档字符串
    在__init__.py 文件内可以加载此包所依赖的一些其他模块







__init__.py 内的特殊列表  __all__列表
作用：
    用来记录此包中有哪些子包或模块需要导入
    当用 from 包 import *语句导入时  只查找 __all__列表中所有的模块或子包
说明：
    __all__ 列表只对from xxx impor * 起作用
    示例见

包的相对导入
    包的相对导入是指包内模块的相互导入

    语法：
    from 相对路径包或模块  import  属性或模块
    或
    from 相对路径包或模块 import * 
相对路径：
    from imoport 语句中 from 和import 间可以用相对路径
    .代表当前目录
    ..代表上一级目录
    ... 代表上两级目录
    .... 依次类推

说明：

    相对导入时 不能超出包的外部
    相对导入不能用于import 语句中
示例见
    mypack/game/contra.py 里的gameover函数






























