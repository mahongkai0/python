
day19回顾

面向对象编程语言
    继承
    封装
    多态
        静.动

    封装
     __ 开头的标示符（属性方法）
    私有成员

多继承
    一个子类继承自两个或两个以上的父类（基类）

解决标示符冲突问题

__mro__  属性
用mro显示调用相应的方法
super（类名，对象）.方法名（）

函数重写
repr（x）  def __repr__（self）
str（x）   __str__(self)
abs（x）
len
reversed
round
int
floa
complex
boox 

属性管理函数
hasattr(obj,name)   obl.name
getattr(obj,name)[,default]
setattr(obj,name,value )

可迭代对象
class A：
    def __iter__(self):
        return 迭代器  # return self
    def __next__(self):
        '迭代器协议'
        if 没有数据:
            raise StopIteration
        return 数据
issubclass(cls,类或元祖)  判断继承关系









day20 

异常（高级）
    异常回顾

    try - except 捕获异常   （得到异常通知） 把程序由异常转为正常
    try - finally 执行必须要执行的语句
    raise  发送异常通知 进如异常流程
    assert  根据条件发送AssertionErrir类型的异常通知

with 语句

语法：
    with 表达式1 [as 变量1], 表达式2 【as 变量2】....
        语句块
作用：
    使用于对资源进行访问的场合 确保使用过程中不管是否发生异常
    都会执行必要的清理操作 并释放资源
  如：
    文件使用手动关闭 线程中锁的自动获取和释放等（线程后面会学）
说明;
    执行表达式 用as字句中的变量绑定生成的对象
    with语句并不会改变异常的状态
示例见
with.py


环境管理器
    类内有__enter__和__exit__实例方法的类创建的实例称为
    环境管理器
    能够用with进行管理的对象必须是环境管理器
    __enter__ 将在进入with语句时被调用并返回友 as 变量管理的对象
    __exit__将在离开with语句时被调用  具可以用参数来判断在离开with语句时是否有异常并作出相应的处理
示例见：
with3.py

运算符 重载
    什么是运算符重载
    让自定义的类创建的对象（实例）能够使用运算符进行操作
作用：
    让自定义的实例像内建对象一样进行运算符操作
    让程序简洁易读
    对自定义的对象将运算符赋予新的规则

算术运算符重载
方法名                              运算符和表达式                      说明
__add__(self,rhs)                    self + rhs                      加法
__sub__(self,rhs)                    self - rhs                      减法
__mul__(self,rhs)                    self * rhs                      乘法
__truediv__(self,rhs)                self / rhs                      除法
__floordiv__(self,rhs)               self // rhs                    地板除
__mod__(self,rhs)                    self % rhs                      求余
__pow__(self,rhs)                    self ** rhs                      幂


注：
rhs（right hand side）  右手边
二元运算符的重载方法格式
def __xxx__(self,other)
    ...


shili:
    mynimber.py

运算符重载说明
    运算符重载的方法及其参数已经在固定的含义    不建议改变原有含义


反向算术运算符重载  
    1.当运算符的左侧围内建函数时，右侧为自定义类型进行运算数运算符运算时 会出现TypeError的错误

    2.因无法修改 内建类的对应方法来实现运算符重载 此时需要使用反向算术运算符的重载来完成重载



方法名                              运算符和表达式                      说明
__radd__(self,lhs)                     rhs +self                      加法
__rsub__(self,lhs)                     rhs - self                     减法
__rmul__(self,lhs)                     rhs   * self                     乘法
__rtruediv__(self,lhs)                 rhs / self                      除法
__rfloordiv__(self,lhs)                rhs // self                    地板除
__rmod__(self,lhs)                     rhs % self                    求余
__rpow__(self,lhs)                     rhs ** self                      幂

f复合赋值算术运算符的重载

    1.已复合赋值算术运算符  x += y为例  为此运算符会优先调用
    x.__iadd__（）方法  如果没有__iadd__方法时  会将复合赋值运算符 x+ = y拆分为x = x.__add__(y) 方法
    如果在不存在__add__方法 则会触发TypeError类型的错误  其他复合赋值运算符也具有相同的规则




算术运算符重载
方法名                              运算符和表达式                      说明
__iadd__(self,rhs)                    self += rhs                      加法
__isub__(self,rhs)                    self -= rhs                      减法
__imul__(self,rhs)                    self *= rhs                      乘法
__itruediv__(self,rhs)                self /= rhs                      除法
__ifloordiv__(self,rhs)               self //= rhs                    地板除
__imod__(self,rhs)                    self %= rhs                      求余
__ipow__(self,rhs)                    self **= rhs                      幂


比较运算符的重载

方法名                              运算符和表达式                      说明
__lt__(self,rhs)                    self < rhs                       小于
__le__(self,rhs)                    self <= rhs                       小于等于
__gt__(self,rhs)                    self > rhs                         大于
__ge__(self,rhs)                    self >=  rhs                       大于等于
__eq__(self,rhs)                    self == rhs                        等于
__ne__(self,rhs)                    self != rhs                        不等于




位运算符重载
      方法名                              运算符和表达式                    说明
    __and__(self,rhs)                       self & rhs                      位于
    __or__(self,rhs)                        self | rhs                      位或
    __xor__(self,rhs)                       self ^ rhs                      位异或
    __lshift__(self,rhs)                    self << rhs                     左移
    __rshift__(self,rhs)                    self >> rhs                     右移




反向运算符的重载
          方法名                           运算符和表达式                    说明
    __rand__(self,lhs)                       lhs & self                      位于
    __ror__(self,lhs)                        lhs | self                      位或
    __rxor__(self,lhs)                       lhs ^ self                      位异或
    __rlshift__(self,lhs)                    lhs << self                     左移
    __rrshift__(self,lhs)                    lhs >> self                     右移


复合赋值运算符的重载
      方法名                              运算符和表达式                    说明
    __iand__(self,rhs)                       self &= rhs                      位于
    __ior__(self,rhs)                        self |= rhs                      位或
    __ixor__(self,rhs)                       self ^= rhs                      位异或
    __ilshift__(self,rhs)                    self <= rhs                     左移
    __irshift__(self,rhs)                    self >= rhs                     右移





——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
type（int）  查看  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
一元运算符
方法名                               运算符和表达式                   说明
__nef__(self)                           -self                        负号
 __pos__(self)                           +self                       正号
 __invert__(self)                        ~self                       取反

 重载格式

 class 类名：
    def __xxx__(self):
        ..
示例见：
    mylist4.py


in / not in 运算符重载
 方法：
def __cotains__(self,e):
    return 真值或假值
运算符和表达式
e in self
或
e not in self
说明：
    not in 与 in 运算符返回值相反  只实现in即或，没有not in 对应的方法

示例见：
mylist5.py



索引和切片运算符的重载
    方法名                    运算符和表达式        说明
__getitem__ (self,i)         x = self(i)             索引/切片取值
__setitem__(self,i,v)        self(i) = v           索引/切片赋值
__delitem__(self,i)          del self(i)            删除索引/切片

作用：
    让自义类型的
    对象能够支持索引和切片操作
示例见：
    mulist6.py


slice 构造函数
格式：

    slice（strat =None，stop=None，step= None）
作用
    创建一个slice切片对象 此对象存储一个切片的起始值  终止值和步长信息
    slice 对象的属性
    s.start  切片的起始值
    s.stop  切片的终止值
    s.step   切片的步长   以上全默认为None




特性属性  @property
    实现其他语言所拥有的getter 和setter 功能

    作用：
    用来模拟一个属性

    通过@property装饰qi可以用来模拟属性的赋值和取值加以控制

示例见：
    property.py


prp8编码规范
    文档参见：
    










































































