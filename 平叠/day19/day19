
day18回顾
类是用来描述实例

类是用class语句创建的对象工厂
类属性（）
类方法  @classmethod
@classmethod
def mycls_method（cls，...）


__base__属性，记录父类（基类）
__doc__ 记录文档字符串
__slots__['name','age']  这个类只能创建这些属性

静态方法
@staticmethod
    @staticmethod
    def my_sttic_method(x,y,z):
        ...

面向过程编程
        函数
面向对象编程
 类
    实例方法
    类方法
    静态方法



继承
父类（基类）  子类（派生类）


语法 
class  MyClass(父类)
    pass

覆盖  override
作用：
    修改/替换父类的行为（方法）
有继承关系，子类实现了与父类同名的方法，子类的对象来调用这个方法，才会实现覆盖

显示调用父类的覆盖方法
类名.方法名（对象，传参）
super（类名，对象）.方法名（传参）
super（）.方法名（传参）

显示调用__init__(self,...)









day19






函数

issubclass(cls,class_or_tuple) 判断一个类是否继承自class或tuple中的一个类，如果cls是class或tuple中的一个子类
则返回true

示例：：
    claas A：
        pass
    class B（A）：
        pass
    class C（B）：
        pass
    issubclass（C,B） Ture
    issubclass（B，C） False


封装  enclosure

    封装是指隐藏类的实现细节，让使用者不关心这些细节
    封装的目的是让使用者通过尽可能少的方法（或属性）操作对象




私有属性和方法
    python类中以双下划线（__）开头，不易双下划线结尾的标示符为私有成员，私有成员只能使用方法来进行访问
    示例见
    enclosure.py


多态  polymophic
 字面意思 ： 多种状态

 状态：
    静态（编译时状态）
    动态（运行时状态）
动态  调用方法与对象相关 不与类型相关

python全部的对象都只有“运行时状态（动态）”，没有c++语言里的”编译时状态（静态）“

示例见：
    poly.py

面向对象编程语言的特征

继承
封装
多态


多继承  multiole inheritance
  语法：
    class 类名(基类名1，基类名2):
    ..
    说明
    一个子类同时继承多个父类，父类中的方法可以同时被继承下来
    如果两个父类中有同名的方法，而在子类中又没有覆盖的此方法，调用结果难以确定
    示例见：
    multiple_inherit.py


多继承的问题
标示符冲突的问题
    要谨慎使用多继承
示例
multi_inherit2.py

多继承的问题
标示符冲突的问题
    要谨慎使用多继承
示例
    mu
多继承的 MRO（Method Resolution Order）
类的 __mro__属性
    此属性用于记录当前类的方法的查找顺序


钻石继承问题（又名棱形继承）  
    A
   / \
  B   C
  \   /
    D


对象转字符串函数的使用
repr（x） 返回一个符合python语法规则且能代表此对象的表达字符串
    通常：
        eval(repr(obj)) == obj 为True
str（x）返回一个代表对象的字符串（这个字符串通常是给我阅读的）

示例：
    s = "I'm a Teacher"
    sr = repr(s)
    ss = str(s)
    print(sr)
    print(ss)

函数重写
什么是函数重写
    在自定义的类内添加相应的方法，让自定义的类创建的对象
    能像内建对象一样进行函数操作
对象转字符串函数的重写方法
    repr（）函数的重写方法
        def_repr_(self):
        ...
    str() 函数的重写方法
        def__str__(self):
str（  obj）函数说明     ...
    1.str(obj)函数先查找obj.__str__()方法     调用此方法并返回结果
    2.如果obj.__str__()方法不存在，则调用object类的__str__实例方法显示<__main__Xxxx.pbject at 0xxxxxxxxxx>格式的字符串
示例见
mynumber.py

内建函数的重写
    __abs__  abs(obj) 函数调用
    __len__   len(obj)  函数调用
    __reversed__     reversef(obj)  函数调用
    __round__      round(obj)  函数调用

示例见：
__len__

数据转换函数重写
方法名                  对应函数名

__complex__             complex(x)
__int__                 int_(x)
__float__                float(x)
__bool__                   bool(x)


布尔测试函数的重写
格式
def  __bool__(self):
    return 布尔值
zuoyong :
    用于bool（obj）函数取值
    用于if语句真值表达式中
    用于while 语句的真值表达式中
说明：
    1.当自定义的类内有__bool__（self）方法时，bool（obj）调用
    2.当不存在__bool__（self）方法时，bool（obj）返回obj.__len__()的值，判断是否为零来测试布尔值
    3.当不存在__len__(self) 方法时，则直接返回True
示例见
bool.py

对象的属性管理函数
参见文档
    内建函数(builtins).html
函数
getattr(obj,name[,default])
getattr(obj,name)
setattr(obj,name,value)
delattr(obj,name)
示例
calss Dog:
    pass


迭代器（高级，终极）
    什么是迭代器
        可以通过next 函数取值的对象是迭代器
    迭代器协议
        迭代器协议时指对象能够使用next函数取下一项数据，在没有下一项数据时触发一个StopIteration 异常
        来终止迭代器的约定
    迭代器协议实现的方法
        方法名                  对应函数
    def __next__(self)：           next（obj）
什么是可迭代对象
    是指能用iter（obj）函数返回迭代器的对象叫可迭代函数

可跌代对象内部需要定义 __iter__(self)  方法来返回迭代器
方法名                  对应函数
def __itwe__（self）：  iter（obj）


有__iter__方法的对象叫可迭代对象
有__next__方法的对象叫做迭代器















