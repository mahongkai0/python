
day17
面向对象编程
    什么是对象
        对象是指物体或实体
    面向对象把一切东西看成物体或实体
对象的特征
属性
    实例属性（实例变量）来记录对象自身的数据
    行为
     实例方法来描述对象的行为
类是用来描述.创建对象的‘工厂’
class 语句
class 类名（继承列表）：
    实例方法
    初始化方法
    析构方法
    类变量
    类方法
    静态方法

构造函数
    类名（调用传参）  #创建实例 instance（对象object）



属性记录在预置属性当中  有两个
__dict__  属性
存储此对象的实例属性的字典
__class__
绑定创建此对象的类
isinstance（obj，类或元祖） (100,int)
type（obj）



day18
类属性（也叫类变量）

    类属性是类的变量，此属性属于类，不属于此类的实例
作用;
    通常用来记录该类创建的对象的共有属性
说明
    类属性可以通过该类直接访问
    类属性可以通过类的实例直接访问 
    类属性可以通过此类的对象的__dict__

类的文档字符串
    类内第一个没有赋值给任何变量的字符串为类的文档字符串
    类的文档字符串可以通过help函数查看
    类的文档字符串可以用类的 __doc__属性访问
示例：
    class Dog:
        '''这是类的文档字符串
        此字符串用来描述Dog对象的行为'''
    #用来查看文档字符串
    >>>help(Dog)
    >>>print(Dog.__doc__)


类的__slots__列表
    作用：
    1.限定一个类创建的实例只能有固定的实例属性，不允许添加此列表以外的实例属性
    2.防止因错误实例属性的名称而发生逻辑错误
说明：
    1.__slots__属性是一个列表 列表的值是字符串
    2.含有 __slots__属性的类所创建的实例对象没有__dict__属性，即此实例不用字典来存储对象的实例属性
示例：
class_slots.py

    
类方法  @classmethod

类方法是用来描述类的行为的方法  类方法属于类  不属于类的实例
说明：
    类方法需要使用@classmethod装饰器定义
    类方法至少有一个形参，第一个形参用于绑定类，预定写为‘cls’
    类和该类的实例都可以调用类方法
    类方法不能访问此类创建的对象的实例属性
实例：
    class_method.py

静态方法 @starticmethod
    静态方法是定义在类内部的函数，此函数的作用域是类的内部
    静态方法与普通函数定义相同  不需要传入self和cls参数
    静态方法只能凭借该类或类创建的实例调用
    静态方法不能访问类属性和实例属性
示例见：

    static_method.py


继承（inheritance）
什么是继承？
    继承是指从已有的类中派生出新的类，新的类具有原类的数据属性和行为
    并能扩展新的行为
名词：
    继承/派生
    派生指是从原类衍生出新的
为什么继承/派生
    继承的目的是延续旧类的功能
    派生的目的是在旧类的基础上添加新的功能
作用;
    用继承派生机制，可以将一些共有功能加在基类中，实现代码的共享
    在不改变基类的代码的基础上改变原有类的功能
名词：
    基类（base class）/超类(super class) /父类(father class)
    派生类(derived class) / 子类 (child class)



单继承
    单继承是指一个派生类由一个基类衍生出来的心累

    语法：
        class 类名（基类名）:
            语句块
    示例见
        inherit.py

继承说明
python3中任何类都直接或借鉴的继承自object类
object类是一切类的基础

类的__base__属性
    __base__属性  用来记录此类的基类（父类）  


python3的类的继承关系键
>>>help(__builtins__)

覆盖 pverride

    什么是覆盖
        覆盖是指有继承关系的类中，子类实现了与基类同名的方法，在
        子类的实例调用该方法时，实际调用的是子类中的覆盖版本，这种现象叫覆盖
    作用：
        修改父类的功能（行为）
示例：：
override.py
问题：
    当覆盖发生时，子类对象能否调用父类中的被覆盖方法？
子类对象显示调用基类方法的方式
    基类名.方法名（实例，实例调用参数）

supper 函数
作用：
借助super（）返回的实例间接调用父类的覆盖方法
语法：
    super（cls，obj） 返回绑定超类的实例 （要求obj必须为cls  类型或cls子类的对象）
super（） 返回绑定超类的实例等同于：
            super(self.__class__, 示例方法的第一个参数)，必须在方法内调用

示例见：
super.py


显示调用基类的初始化方法__init__
    当子类中实现了__init__方法，基类的初始化方法并不会被调用
    此时就需要显示调用父类的初始化方法来初始化父类对象

    示例见：
    super_init.py














































































































