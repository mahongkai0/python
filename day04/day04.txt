day03回顾

'''abc
123'''

表示  ‘abc\n123’
转义字符

\' \"  \\ \n   \r   \t    

is / is not       什么时候都能用  跟对象无关
in / not in

函数
len（） 求字符串长度
max()   编码值最大
min()    编码值最小
ord（）   返回一个字符的编码值
chr（）  用一个编码值返回对应的字符
bin（）      返回一个整数的二进制
oct（）       八进制
hrx()             十六进制
str（）          返回一个对象的字符串 




day04

字符串的格式化表达式
作用：
 生成一定格式的字符串
运算符  %
语法格式：
  格式化字符串 %  参数值
  格式化字符串 % （参数值1，参数值2，...）
  
示例：
fmt = "name: %s, age:%d"                 %s   占位符
n = 'tarena'
a = 15
result = fmt % (n ,a)
#   result = "name: n, age:a" 

s 2 = '成绩： %d'  % 100

格式化字符串中的占位符和类型码
占位符和类型码             意义
%s                         字符串，使用str（x） 函数转换
%r                         字符串，使用repr（x）函数转换
%c                           整数转化为单个字符
%d                               十进制数
%o                              八进制数
%x                             十六进制数（a-f）
%X                             十六进制数（A-F）
%e                           指数型浮点数（e小写），如 2.9e+10
%E                           指数型浮点数（e大写），如 2.9E+10
%f，%F                     浮点十进制形式
%g,%G                            十进制浮点或指数浮点自动转换       如： %g % 3.14   #3.14     %g % 3.140000000  #3.14e9 
%%                        等同于一个%字符                %d%%  % 10                10%


占位符和类型码之间的格式化语法
% [- + 0 宽度.精度] 类型码
说明：
-                  左对齐（默认为右对齐）
+                   显示正号
0                 左侧空白位置补0
宽度              整数，整个数据输出的宽度
精度                 整数 保留小数占后多少位（默认6位）

示例：

"%d" % 123  # '123'
"%10d"  % 123    #'      123'            (一共10个字符)
"%-10d" % 122    # '123       '          (左侧对齐)
"%10s" % 'ABC'     # '      ABC'
"%010d"  % 123     #'0000000123'                     
"%+010d" % 123        #'+000000123'     加个正号 本来只有负号显示  现在正号也就可以显示

pi = 3.1415926535897932
"%f" % pi            # '3.141593'
"%.10f" % pi     #'3.1415926536'

"%7.2f" % pi          #'    3.14'   总长度为7位  默认小数点保留两位
宽度是最小的  显示不下 它会自己变长


循环语句
      循环语句
 while 语句
 for  语句

问题：
 输入一个整数：
写程序打印：

这是第一行
这是第二行
...
这是第n行


while 语句：
作用：
根据一定条件  重复的执行一条语句或多条语句
语法格式：
while 真值表达式：
    语句块1（此部分可能重复执行）
else：
    语句块2
说明：
1.先执行真值表达式 测试布尔值为True或False
2.如果真值表达式测试值为True，则执行语句块1，然后在返回到第一步 重复进行测试
3.如果真值表达式测试值为False，则执行语句块2，然后结果此while 语句的执行 如果没有else句子 则直接结束此while语句的执行
注：
else 字句部分可以省略（同if语句类似）



while 注意事项

1.控制循环的真值表达式来防止死循环
2.通常用真值表达式内的循环变量来控制循环条件，
3.通常在循环语句块内改变循环变量来控制循环条件和变量的走向


while 语句嵌套
  while  语句本身是语句，和其他语句一样 可以嵌入到任何复合语句当中
示意;

while 真值表达式1：
  ....
    while 真值表达式2：
     .... 
    else：
       ..
else:


break  语句
问题：
   如何在循环过程中  不想再继承执行此循环了
作用：
用于循环语句（while或for语句中），用来终止当前循环语句的执行
语法;
    break
说明：
 当break语句执行后，此循环语break之后的语句将不再执行
 break 语句通常和if语句组合使用

    break  语句终止循环时　循环语句的else自居的语句不会执行
　　　break  语句只能终止当前循环语句的执行　如果有循环嵌套
　　　　　　　时，不会跳出起嵌套的外重循环
　　　break  语句只能在循环语句（while,for语句）的内部使用

死循环  death loop
　　　死循环是指循环条件一直成立的循环
　　　死循环能通常用break语句来终止循环
　　　死循环的else　子句永远不会执行


示例：
i = 1
while True:
     print(i)
     if i == 10:
         break
     i += 1































































































































































































