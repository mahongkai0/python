


1.关系型数据库和非关系型数据库的比较

    * 不是关系模型构建的数据库 不保证数据的一致性  机构更加自由灵活 
    *非关系型数据库弥补了关系型数据库在处理高并发存储时读写效率的问题
    *非关系型数据库种类多样 技术不如关系型数据库成熟，没有统一的操作语句

2.Mongodb  特点 安装 基本设置
3.创建数据库
    use databases 创建数据库
    
    db.dropDatabase（） 删除数据库
   
    show dbs  查看数据库

    mongodump  备份
    
    mongorestore  恢复

    mongostat  数据库检测

    mongotop  数据库读写时常

4.集合操作
    db.createCollection(‘’)          创建集合
    db.createCollection.insert(‘’)       创建集合 有的话就插入
    db.getCollection（‘’）        获取集合对象
    db.collection.drop（） 删除集合 ------------------------collection  换成集合名称
    db.collection.renameCollection（‘’）  重命名           
    show collections    查看集合


插入文档
插入单个文档
    db.collection.insertOne()
    功能：插入一条文档
    参数：要插入 的文档

        eg:
        db.class0.insertOne({'name':'Lily','age':18,'sex':'w'})
    
     *查看插入结果   db.claas0.find()

        db.class0.insertOne({name:'Tom',age:16,sex:'m'})

    * 在对文档操作时 键可以不加引号
    db.class0.insertOne({name:'Tom',age:16,sex:'m'})
    
    * 可以自己添加_id域的值但是_id域不能重复
    db.class0.insertOne({'_id':1,'name':'BEN','age':16,sex:'m'})
    
    *一个集合中插入的文档是有顺序性的

    插入多个文档    db.collection.insertMany([{},{}..])
                    功能; 插入多个文档
                    参数：数组中包含多个文档
                    
    e.g  同时插入多条文档               
                    db.class0.insertMany([{name:'秀波',age:50,sex:'m'},
                    {name:'文章',age:34,sex:'m'},{name:'林丹',age:31,sex:'m'}])    



    插入文档  db.collsection.insert()
            功能： 等于onsertOne+insertMany

    save  插入文档
    db.collection.save()
    功能;插入文档  用法同insert
    参数：同insert 同时插入一条或者多条文档
    db.class0.save({name:'Abby',age:17,sex:'w'})
    db.class0.save([{name:'zhang',age:34,sex:'w'},{name:'dawei',age:41,sex:'w'}])    
    db.class0.save({_id:1,name:'k',age:78,sex:'m'}) ##### 会覆盖原先的id等于1  而insert会报错

查找操作

    db.collection.find(query,field) 
        集合i名称      条件   第二个值
    
    find(query,field) 
    功能：查找所有的复合条件的文档
    query   表示筛选条件
    field   表示要查找的域
    
    查找集合中所有内容   
        db.collection.find()

    query 是一个键值对构成的文档 表示查找条件

    e.g  查找所有年龄为17的
        db.class0.find({age:17})

    filed  是一个键值对构成文档  通过描述某个域的值是1或者0 表达是否查找  1表示查找 0表示不查找
    
    
    
    db.class0.find({},{_id:1})
    db.class0.find({},{_id:0,sex:0})

    db.class0find({},{name:1,age:1})

   e.g  不查找_id  查找name  age域

   db.class0.find({},{_id:0,sex:0})


findOne(query,filed)

功能  查找第一条复合条件的文档
参数 同find

query的筛选功能
    操作符：使用$符号注明了一个有特殊意义的子符串 表达丰富的含义 
    比如：      $lt       表示小于
    
    比较操作符

        $eq   等于=
        eg
       
        db.class0.find({age:{$eq:18}},{_id:0})

        
        
        
        $lt       表示小于
        db.class0.find({age:{$lt:18}},{_id:0})
        
        e.g 名字小于Jac（字符串可以比较大小）
        
        db.class0.find({name:{$lt:'Jack'}},{_id:0})

        
        
        
        
        $gt 大于
        db.class0.find({age:{$lt:18'}},{_id:0})

        大于小于

        db.class0.find({age:{$gt:8,$lt:18'}},{_id:0})

        $lte  小于等于   <=
        $gte  大于等于  >=
        $ne     不能与  !=


        $in   包含
        e.g  查找年龄在数组范围内的文档
        db.class0.find({age:{$in:[18,19,34]},{_id:0]})

        $nin 不包含
        e.g 查找年龄不包含在数组中的
        db.class0.find({age:{$nin:[18,19,34]}},{_id:0})

逻辑操作符
    表示逻辑与

    1.在query文档中 逗号隔开的多个键值对即表示与关系
        e.g
        寻找年龄为34 并且为w的人
        db.class0.find({age:34,sex:'w'},{_id:0})


    2.$and 表示逻辑与
        
        db.class0.find({$and:[{age:{$gt:17}},{sex:'w'}]},{_id:0})




    3.$or  或

e.g  寻找年龄大于18  或者性别为w的
db.class0.find({$or:[{age:{$gt:18}},{sex:'w'}]},{_id:0})


    4.$not
寻找年龄不大于17岁的
db.class0.find({age:{$not:{$gt:17}}},{_id:0})

    5.$nor  寻找年龄不小于17  性别也不为女
db.class0.find({$nor:[{age:{$lt:17}},{sex:'w'}]},{_id:0})

条件混合   

    年龄大于18或者小于17  并且性别为难 


db.class0.find({$or:[{age:{$gt:18}},{age:{$lt:17}}],sex:'m',},{_id:0})

    年龄大于等于17 或者名字叫文章

db.class0.find({$or:[{age:{$gte:17},sex:'m'},{name:'Lily'}]},{_id:0})  



数组类型查找
    数组：一组数据的有序集合 用【】表示
    *有序性
    *数组中的元素可以是不同的数据类型



    db.class1.insert({name:'小红',age:8,socre:[88,98,63]})
    db.class1.insert({name:'小明',age:9,socre:[76,83,62]})
    db.class1.insert({name:'小刚',age:8,socre:[83,90,88]})
    db.class1.insert({name:'小亮',age:8,socre:[83,62]})


查询开始：

    查找数组中包含某一项
    e.g 查找数组中包含大于90的文档
   
    db.class1.find({socre:{$gt:90}},{_id:0})



    查找数组中同时包含多项的   $all
    e.g  查找数组中同时包含83  88 的
    db.class1.find({socre:{$all:[83,88]}},{_id:0})

    
    
    根据数组元素个数查找   $size
    e.g 查找数组中包含两个元素的
    db.class1.find({socre:{$size:2}},{_id:0})



    选择数组的显示部分  $slice (用于field的参数)
    
    e.g 显示数组的前两项
    
    db.class1.find({},{_id:0,socre:{$slice:2}})


    e.g  跳过第一项 显示后面两项
    
    db.class1.find({},{_id:0,socre:{$slice:[1,2]}})




其他查找操作符
    $exists  判断一个域是否存在  值为bool
                    db.class0.find({sex:{$exists:false}},{_id:0}) #即为不存在sex域（true 表示存在 false表示不存在）


    $mod  通过除数和余数查找文档
       eg  查找年龄除以2 余数为1
        db.class0.find({age:{$mod:[2,1]}},{_id:0})

    $type  根据值的数据类型筛选
           查找age数据类型为1的文档
            db.class0.find({age:{$type:1}},{_id:0})


数据处理函数
#############################################################333333333333333333333333333333333333333333
￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥
        db.collection.distinct(field)
        功能：获取某个集合值的范围
      

        e.g   获取class0中age域的值
            db.class0.distinct('age')

    pretty()
        功能： 将find结果格式化显示
         db.class0.find().pretty()

    limit(n)

    功能; 显示find结果的前n条文档

    eg 显示查找结果前5条
    db.class0.find({},{_id:0}).limit(5)

    skip(n)
    功能;  跳过前n条文档显示后面的内容
     db.class0.find()
    db.class0.find({},{_id:0}).skip(5)


    count()
    功能;  对查找结果统计计数
    db.class0.find({},{_id:0}).count()

    统计有多少年龄大于17的
    db.class0.find({age:{$gt:17}},{_id:0}).count()

    sort({file:1/-1})
    功能;对查找文档按照某个域的值排序
    参数： 表示要排序的域
    
    
    eg  按照年龄
    db.class0.find({},{_id:0,name:0}).sort({age:-1})

    
    复合排序：对多个域进行排序  当第一排序项相同时 参考第二序项排序
    eg 年龄相同时 按照name排序
    
    db.class0.find({},{_id:0}).sort({age:1,name:-1})



    函数的连续调用

    * 当一个函数的返回结果仍然是文档集合 可以继续调用函数
        eg
        db.class0.find({},{_id:0}).sort({age:-1}).limit(3)

    * 可以对文档集合通过序列号直接选择
    db.class0.find({},{_id:0})[1]

    文档删除操作

    mysql
    delate from table where 
    Mongodb
    db.collection.deleteOne(query)
        功能： 删除复合条件的第一条文档
        参数; query的筛选条件  用法同find query
    eg  删除第一个年龄小于40的
    db.class0.deleteOne({age:{$lt:40}})


    删除所有符合条件的
    db.class0.deleteMany({age:{$lt:40}})


@@@@@@@@@@@@@@@@@@@@@
db.class0.find({$and:[{age:{$gt:17}},{sex:'w'}]},{_id:0})


    eg 删除所有年龄大于35并且为男的
    db.class0.deleteMany({age:{$gt:35},sex:'m'},{_id:0})
        ###db.class0.deleteMany({})  删除所有


    db.collection.remove(query,justOne)

    功能;删除文档
    参数：query 筛选条件
        justOne 默认为false 此时同daleteMany
                写为ture    此时同deleteOne
            eg   db.class0.remonve({sex:'x'},true)
            ###db.class0.deleteMany({})  删除所有

        db.collection.findOneAndDelete(query)
        功能;查找某个文档 并删除
        参数：query
        返回; 返回查找到的文档
            eg  删除name 为zhang的
            db.class0.findOneAndDelete({name:'zhang'})



    练习  
    1.创建数据库 grade
    use grade
    2.在数据库中创建集合 class
    db.createCollection('class')
    3.在集合插入若干数据文档

    db.class.insertOne({name:'zhangsan',age:10,sex:'m',hobyy:['draw']})
    db.class.insertOne({name:'BEN',age:8,sex:'w',hobyy:['draw','dance']})
    db.class.insertOne({name:'dom',age:7,sex:'w',hobyy:['running','dance']})
    db.class.insertOne({name:'z',age:15,sex:'m',hobyy:['computer']})
    db.class.insertOne({name:'yun',age:13,sex:'w',hobyy:['sing']})
    db.class.insertOne({name:'hai',age:12,sex:'m',hobyy:['fottball']})
    





    文档结构 {name:xxx,age:10,sex:'m',hobyy:['draw','dance']}
            年龄 7 -- 15岁
            hobby: draw  dance  running sing football
                basketball  computer

    4.查找练习
    查看班级所有人信息
    db.class.find()
    查看班级中 年领8岁学生信息
    db.class.find({age:8},{_id:0})
    db.class.find({age:{$eq:8}},{_id:0})
    查看年龄大于12岁学生信息
    db.class.find({age:{$gt:12}},{_id:0})
    查看年龄在8--12岁的学生信息
    db.class.find({age:{$gte:8,$lte:12}})
    db.class.find({age:{$gte:8},age:{$lte:12}})
    查看年龄8岁且喜欢画画的女生
    db.class.find({age:8,hobyy:'draw'})
    
    查看年龄小于8岁或者大于12岁的学生
    db.class.find({$or:[{age:{$gt:12}},{age:{$lt:8}}]})
  
     
    
    查看年龄9岁或者11岁的学生
    db.class.find({age:{$in:[9,11]}})
    db.class.find({$or:[{age:9},{age:11}]})

    查找有两项兴趣爱好的学生
    db.class.find({hobyy:{$size:2}})
    找到兴趣爱好有计算机的学生
    db.class.find({hobyy:'computer'})
    找到即喜欢画画又喜欢跳舞的学生
    
    db.class.find({hobyy:{$all:['dance','draw']}})



    统计兴趣有三项的学生人数
    db.class.find({hobyy:{$size:3}}).count()
    找到本班年龄第二大的学生
    db.class.find({}).sort({age:-1})[1]
    找到班级中年级最小的三个男生
    db.class.find({sex:'w'}).sort({age:1}).limit(3)
    查看班级中同学兴趣爱好范围
    
    db.class.distinct('hobyy')
    删除所有年龄小于8岁的同学
    db.class.deleteMany({age:{$lt:8}})
    



