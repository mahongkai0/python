
day07huigu 
两个容器 
元组 tuple 字典 dict
元组的创建  
（）  （20，） （1,2,3）  1,2,3
构造函数：tuple（）               tuple（可迭代对象）
运算
+  +=    * *=
同列表的比较规则完全相同
in / not  in  运算
索引 切片  
t【1】
    t【1:10；2】
    元组的方法
    T.index（value[,begin[,end]]）
    T.count(x)  返回元素个数
字典 dict 
可变的 无序的 容器
键 key   -   值 （value）对
（不可变）    （任意类型）
字典的创建方式
字面值  {}         {'1':'一',2:2.2}
构造函数 dict(), dict(可迭代对象) dict（关键字传参          dict（a = 1 b=2）  
推导式 
{键表达式 for 变量 in 可迭代对象 if 真值表达式}
添加和修改字典的键值对
d【键】 = 值表达式
删除字典的键
del d【键】
查看字典的键的对应的值
value = d【键】
字典是可迭代对象（可以迭代取出字典的键）
 
可迭代对象能用来在什么地方
for 变量 in ！！！
【表达式 for 变量 in ！！！】
in /not in   运算
比较运算
==   ！=
函数的
len（x）  max（x）    min sum  all any
字典的方法：
d.celer（）清空
d.pop（key）传出删 拿值
d.updaate（d2）  合并
d.copy 浅拷贝

d.get(key,default=None)  #d[key]
d.keys()              包含全部键的可迭代对象
d.values()         返回值的可迭代对象
d.items（）          返回（键值）元组的可迭代对象


day08





集合 set
集合是可变的容器
集合内的数据对象都是唯一的（不能重复多次的）
集合是无序的存储结构 集合中的数据没有先后顺序关系
集合内的元素必须是不可变对象
集合是可迭代对象
集合相当于只有键没有值的字典(键则是集合的数据)
￥################里面不能放可变容器

创建空集合
set()
创建非空集合的字面值
s = {1,2,3}
集合的构造（创建）函数 set
set（）创建一个空集合 （注：不能用{}来创建空集合）
set（iterable） 用可迭代对象创建一个新的集合对象

s = set() 创建一个非空集合
s = {2,3,5,7}
s = set("abc")   #s = {'a','b','c'}
s = set("abccba")     #  s = {'a','b','c'}
s =set({1:'一',2:'二'})   #{1,2}        集合不可以放字典 但这题为放可迭代对象 通过ste返回值
s =set（[1,0,3.14,None]）         # {0,1,3.14，None}
s= set（【True，false，1,0，None】）  s = {True,False,None}
s = set(("abc","123",123))        双括号去掉一个不行  外层函数调用 中间放了个元组 元组必带括号
s= {True，None，[1,2,3]}    出错  不能放可变的值 列表和字典一样 
 
s= {True，None，{1：2}}          出错  不能放可变的值 列表和字典一样 

s= {True，None，{1，2}}   出错  不能放集合  因为集合可变

交集&    并集|     补集-    对称补集^   子集<   超集>

 & 生成两个集合的交集
s1={1,2,3}
s2={2,3,4}
s1 & s2    得 {2,3}

并集
s1={1,2,3}
s2={2,3,4}        s1|s2       {1,2,3,4}

补集
s1={1,2,3}
s2={2,3,4}        s1 -s2       {1}     s2 - s1    {4}

对称补集

s1 = {1,2,3}
s2 = {2,3,4}
s1 ^ s2   得{1,4}

> 判断一个集合是另一个集合的超集
< 判断一个集合是另一个集合的子集
s1 = {1,2,3}
s2 = {2,3}
s1 > s2   #True
s2 < s1    #True
s2 > s1   # False
 

==   !=   集合相同或者不同      跟顺序无关 
如： s ={1,2}
    s1 = {2,1}
    ==   True         != False
其他
《=          >=

&=    x &= y相当于  x = x & y

|=    x |= y相当于  x = x | y
^=    x ^= y相当于  x = x ^ y


in / not in 运算符
通列表的in 、 not in 作用相同
集合相关函数：
len（x）
max（x）
min(x)
sum(x)
any
all


集合的方法：


集合推导式
 集合的推导式是用可迭代对象创建组合的表达式
 语法:
 {表达式 for 变量 in 可迭代对象 [if 真值表达式]}
 注：[]括号内的部分可以省略
如

L = 【1,2,3,6,5,4,3，2,1】
s = {x ** 2 for x in L}
print(s)

推导式只有 三中  列表 字典 集合

集合推导式也支持嵌套
与列表推导式规则完全相同
可变 list  set
不可变    tuple   frozen set

固定集合
frozenset
固定集合是不可变的  无序的  含有唯一元素的集合    里面不可以放可变的 
固定集合就是不可变的集合
作用：
固定集合可以作为字典的键 还可以作为集合的值

固定集合 的构造函数 frozenset
frozenset（）     创建一个空的固定集合
frozenset（iterable）  用可迭代对象创建一个固定集合

示例：
fz = frozenset（）
fz = frozenset（range（10））

固定集合的运算  
& 交集   &=
| 并集   |=
- 补集   -=
^ 对称补集   ^=
以上运算等同于set的用法

固定集合的方法
去掉修改集合的方法 
第1，2，3，4 ，6  个
update 还有下面几个





















小结：：：：：：：：：：：：：：：：：：：
数据类型：
不可变类型：
int float complex  bool str tuple frozenset
bytes（字节串）
可变的数据类型：
list   dict set bytearray（字节数组）


值：

None ，False， True ...

运算符：

 + - * /  //   %   **     
 +=  —=   .. 
>   >= < <= == !=
is / not is
in /not in
not and or
& | ^
&= |= ^ =
+ (正号)  -(负号)
[]  [:]      索引和切片

表达式：
1
1 + 2
len(L1) + len(L2)

条件表达式
x if  x > y else y

全部推导式
[x for x in range(10)]
列表  集合   字典     三种

语句：
表达式语句：
    print("hello")
    ""abcd""
赋值语句
a = 100
a = b = c = 200
x,y,z =100,200,300

del 语句
if 语句
while 语句
for 语句
break 语句
continue 语句
pass 语句

内建函数
用于容器的函数
len（x）
max（x）
min(x)
sum(x)
any(x)
all(x)

构造函数
int(x)
float(x)
complex(x)
bool(x)
str(x)
list(x)
tuple(x)
dict(x)
set(x)
frozenset(x)

数值型函数

abs(x)
round(x,y) 四舍五入
pow(x,y,z=None)  x的y次方对z求余

字符串相关的函数
bin（x）  二进制
oct(x)
hex(x)
chr(x)
ord(x)


可迭代对象相关的函数
range（start，stop，step）
reverse（x）   反过来读
输入输入函数
print
input

type(x)   查看类型
id（x）
help（x）





函数  function
什么是函数
    函数是可以重复执行语句块 可以重复调用
    函数面向过程的最小单位

作用
1.用于封装语句块 提高代码的重用性
2.定义用户级别的函数

def 语句
作用：
创建一个函数  用变量绑定这个函数
语法
def 函数名（形参列表）
    语句块（代码块）
说ming :
1.函数的名字就是语句块的名称
2.函数名的命名规则与变量名相同（必须为标示符）
3.函数名是一个变量 （不要轻易对其赋值）
4..形参列表是用户自定义的变量名  用来接收调用者传入的参数
5.函数有自己的名字空间 在函数外部不可以访问函数内部的变量，在函数内部 那可以访问函数外部的变量 但不能用赋值语句修改
    这些变量(外部)的绑定关系
6.函数如果不传入形参 参数列表可以为空
7.语句部分不能为空 如果为空需要填充pass语句
示例见：

函数调用
函数名([实际调用传递参数])
注：[] 代表内容可省略
说明：
函数调用是一个表达式
如果函数内部没有return  语句 则函数执行完毕后返回None 


























































































