
day08回顾
两个容器类
set 集合 可变
set（） /set（iterable）
{1,2,3}
集合推导式{x for x in range（10）}
frozenset 集合 不可变
frozenset （）/ frozenset（iterable）

函数  len（x）
s.add(x) 添加
s.remove 删除
s.discard（x）删除 不报错误
s.pop（x） 移除
s.clear（） 清空
s.copy  浅拷贝
s.update（s2）

list str tuple dicat set frozenset  bytes     bytearray


函数  function
def 语句
作用 
封装语句块  把一些语句看成功能的整体

语法：
def 函数名（形参列表）
    语句块
return 语句
作用：
结束当前函数的执行  返回到调用此函数的地方  同时返回一个对象的引用关系（默认返回None）
语句
    return
    函数名（实际调用传参）

day09笔记

python  函数参数的传递
   把数据给函数
传递方式：
1.位置传参
序列传参
2.关键字传参
字典关键字传参

位置传参
  实际参数（实参）与形式参数（形参）的对应关系  是按位置来依次对应的
  示意：
  def mymin（a，b，c）:
    pass
mymin（1，2，3）
实参 123  形参abc  默认按位置赋值


说明：
实参和形参按位置进行匹配
实参的个数必须与形参个数相同

序列传参
序列传参是指在函数调用过程中  用星号（*） 将列表拆解后按位置进行参数传递的方式

说明：
序列传参时  序列拆解的位置将与形象一一对应

关键字传参

是指传参时 按着形参的名称给形参赋值
实参和形参按名称进行匹配

说明：
实参和形参按名称进行匹配  可以不按位置进行匹配
实参中的关键字要在形参中存在

字典关键字传参
  是指实参为字典  将字典有两个星号（**）拆解后进行关键字传参的传递方式
  示例

说明：
1.将字典的键名和形参名必须一致
2.字典的键名必须是复合标志符
3.字典 的键要在形参中存在


函数的综合传参
1.函数的传参方式  在形参能唯一匹配到相应的实参的情况下
可以任意组合
2.函数的位置传参要先于关键字传参
示例
def myfun（a，b，c）:
    pass
myfun（100，*[200,300]）
myfun（*(100，200),300)
myfun（(*[100],*"AB")
myfun（*[100],200,*[300])

myfun（1，c = 3,b=2)
myfun（c = 3,**{'b':2,'a':5})

错误示例  myfun（a =1,a = 21,*[100],*[200])  多给  不给都为错误
错误示例   myfun（b= 30，a=20,c)  位置参数跟在了关键字参数的后面为错误 前面可以
错误示例     myfun（a =1,2,c =3)        他以为2要给a



函数的参数传递过程
示例
a = 100
b=200
def f1(x,y):
    print(x + y)
f1(a,b)      # x =a y =b
###实参给形参进行赋值传递  并不会复制新的对象
即  x和a   同时引用 100  y和b同时引用200

可变的数据类型作为函数的参数传递
  示例：
a = [1,2,3]
b = 200
def f2(x,y):
    x.append(y)
f2(a,b)
print(a)    [1,2,3,200]
print(b)       200

f2(a,300)  x = a  y = 300
print(a)         #####[1,2,3,200,300]


—————————————————————————————以下讲函数的形参—————————————————————————————————————


函数的缺省函数：
语法：
def 函数名（形参名1=默认实参1，形参名2=默认实参2，.......）
    语句块
示例

让调用更加方便 无需传入无关的实参
说明：
缺省参数必须自右至左依次存在，如果一个函数有缺省参数，则其右侧的所有参数都必须有缺省参数，如：
def error_fn(a,b =10,c):....错误
缺省参数个数无限制
def fn(a = 0,b=1,c=2): 正确
def fn(a = 0,b,c=2):  错误



函数形参的定义方式
1.位置形参
2.星号元组形参
3.命名关键字形参
4.双*号字典形参
示例

位置形参
语法：
def 函数名（*元组形参名）
    语句块

星号元组形参
语法：
def 函数名（*元组形参名）
    语句块
作用：
收集多余的位置传参
说明
元组形参命名为‘args’
示例



命名关键字形参
语法：
    def 函数名（*，命名关键字形参1，命名关键字形参2，...）：
    语句块
    或 
    def 函数名（*args命名关键字形参1，命名关键字形参2，...）：
    语句块
作用：

强制所有的参数都必须用关键字传参或字典关键字传参传递
示例

def funcl（a，b，*，c，d）  #####星号比不是形参 是语法上的分割符
    print（a，b，c，d）

func1（1,2,3,4）                  #############让此处出错 强制使用下面
func1(11,22，d=44，c=33)         


双星号字典形参：
语法：

def 函数名（**字典形参名）:
    语句块
作用：
收集多余的关键字传参
说明：
字典形参名一般命名为‘kwargs’
一个函数内字典形参最多只能有一个
示例：

函数的参数说明：
位置形参 缺省参数 星号元组形参 双星号字典形参 可以混合使用

函数参数 自左至右的顺序为：
位置形参
星号元组形参
命名关键字形参
双星号字典形参

示例：
def fn（a，b,*rags,c,**kwargs）:
    pass
def fn(100,200,300,400,c=1,d=2,e=3)


可以接受任意的位置传参和关键字传参的形参列表
def fn(*args, **kwargs)
    print(args,kwargs)


全局变量和局部变量
局部变量 local variable
 定义在函数内部的变量成为局部变量（函数的形参页是局部变量）
 局部变量只能在函数内部使用
 局部变量在函数调用时才能被创建 在函数调用后会自动销毁

 全局变量   global variable
 定义在函数外部  模块内部的变量成为全局变量
    所有函数都可以直接访问（函数内部不能将其赋值）

示例


a = 100
b = 200
def fx(c):
    d = 400
    a= 999   创建新的局部变量 并不更改全局变量
    print(a,b,c,d)

                             #######全局  a b fx 局部  c  d
fx(300)
print(a,b)
print(c,d)         ######出错  c.d 不存在


































