day01 回顾
./xxx.py   相对路径运行
/home/tarena/xxx.py　绝对路径运行
　　整数　int　 复数　complex  
　　　布尔数　ｂｏｏｒ　　浮点数　　float

浮点数两种　：小数形式和科学计数
空值　　none　　　none只有一个　如　　a = none      b = none
                                    a  is  b    True
表达式　函数调用也是表达式　　函数表达式一定　能返一个值


变量的作用：
创建变量来绑定数据对象
改变变量的绑定关系
del   删除变量同时解释与对象的绑定关系



ｄaｙ02


复合赋值算术运算符
＋＝　-= *= /=  //  =  %=   **=
x += y
x **= y     x = x ** y
以下全同格式

比较运算

<　<=　>　>=　　　==  !=  
语法：
左表达式　　＜　右表达式的语法
说明：
比较运算符返回布尔类型的值

如　　1 <= 2   True

x = 60
0 <= x <=100 True

1 < 5 > 4 < 100 != 200  True  

数值对象的转换函数（创建）函数
float(obj)　　　　　　　　　　　用字符串或数字转换为浮点数　如不给出参数则返回0.0　　如：　　a = float(10)   a = 10.0   ;  a = float("3.4")   a = 3.4
int（x, base=10）或int(x = 0)用数字或字符串转换为整数　如果不给出参数则返回0    如：   a = int(3.14)  a = 3;   a =int("1000.5")  出错
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　a =int(1000.5)  a = 1000.5  在于是不是数字和字符串


　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　a = int("1111",10)   a = 1111
                                                                              a = int("1111",2)   a = 15
                                                                                int("1A", 16)       >>>=   26
complex(r=0.0, i =0.0) 用数字创建一个复数　实部为r　　虚部为i        complex(100)      >>>=   100+0j                
bool(x)   用x获取一个布尔值（True/False） 
返回假值的情况
bool(x) 用于显式获取ｘ的布尔值
值　说明             
Ｎone  　　　　　　　　　 空值
Ｆale   　　　　　　　　布尔假值
0   0.0   0j      所有的数字零

＇＇　　　　空字符串
［］　　　　空列表
（）　　　　空元组




函数调用
函数名（传参列表）
说明：
函数调用是表达式　一定会返回一个对象的引用关系（或者none）     



预置的数值型函数
abs(x)   取ｘ的绝对值
round(number[, ndigits]) 对数据进行近似的值　＂四舍五入＂，ndights　是小数向右取数的位数　　如：　x = 2.364
                        负数表求向左取整                                                 round(x, -1)
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　  
pow(x, y, z=None)  相当于　x**y  或  x**y%z   如：　　　pow(3, 5)  或pow(3, 5, 5)  3 ** 5 ％　5
注：　　中括号表示里面的内容可省略


help()   函数查看帮助文档
help(函数名)
如　　　　　　　　　help(abs)


语句：  statement
　　　语句由一些表达式组成　　通常一条语句可以独立执行来完成一部分
　　　事情并形成结果
　　　　　一条语句建议写在一行内
　　　　　多条语句写在一行内需要用分号（;）分开
示例：
　　　x = 100 + 200
     print(x)

写在一起为　　　　　x = 100 ＋　200　; print(x)
显式换行：
　　　拆行符＼（返斜杠）
　　　拆行符必须放在一行的末尾　来示意解释执行器　　下一行也是本行的语句  后面不跟符号
示例见：
　a = 3 + 1 *3 /1 **3 -3  \
     + 6 - 9



隐式换行

所有的括号内换行　称为隐式拆行
括号　() [] {}

基本输入输出
　基本输入函数　　input()


input('提示字符串')　　　返回用户输入的字符串
说明：

　　提示字符串可以为空
返回值：
　字符串
基本输出函数　　print
作用：
  将一系列的值以字符串开式输出到标准输出设备上　　默认为终端
  格式：
  　print(v, ... sep = ' ', end = '\n', flush = False)
关键字参数：

sep:两个值之间的分隔符　　默认为一个空格            分隔符不能分割print(1)
end: 输出完毕后在字符末尾自动追加一个字符　默认为换行符＇＼n＇
flush: 是否立即输出到屏幕上，默认为　False（不立即输出）　

if 语句
问题：
作用：
让程序根据条件选择性的执行某条语句或某些语句
语法：
　　　if 真值表达式1：
　　      语句块1
     elif 真值表达式2：
     　　　语句块2
　　　elif 真值表达式3：
     　　　语句块3

　...
　　　else:
          语句块4
   
说明：
elif 子句可以有0个1个或多个
else 子句可以由0个或1个　　且只能在此ｉｆ语句的最后


if真值表达式
if 100:
    print("真值")                    
等同于：
if bool(100):
    print("真值")


if 语句嵌套
　　if 语句本身是由多条子句组成的一条复合语句
　　if 语句可以作为语句嵌套到另一个复合语句的内部


条件表达式
语法：
　　表达式1　if 真值表达式　else 表达式2
作用：
　　根据真值表达式的取值（Ｔrue/False）来决定执行
　表达式1　或表达式2　并返回结果

pass 语句
　　作用：
　通常用来填充语法空白
　语法：
　　　pass

布尔运算
 运算符
 not and or
 布尔非操作：　　not
       语法：　　　not x
         注：　x代表表达式
    作用：
    对x进行布尔取非，bool(x)　为Ｔrue则返回False 否则返回false
示例见：
not True  　＃返回false
not False     #True

布尔与操作　　and
语法：
　x and y
x y 代表表达式
作用：
优先返回假值对象
当x的布尔值为Ｆalse　返回x   否则返回y
如：
　True and True          #True     if 100 and 3.14  print(True)    正确　　　　100　and 3.14      返回3.14
  True and False         #False　　　　　　　　　　　　　　　　　　　　　　　　　　　　0　　and 3.14  　  返回0
 False and True         #False
 False and False         #False 


布尔或操作
语法：
x or y
作用：
优先返回真值对象
当x为True时返回x  否则返回y

如;
 True or True          # Trues
 True or False         #True
 False or True         #True
 False or  False      #False
 0 or 3.14         # 3.14
 0 or 0.00          #0.00


正负号运算符
＋　　　－
一元运算符　（一个元素参加运算）






























