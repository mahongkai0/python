

day04  回顾

"姓名：%s 年龄：%d" % ('tarena',15)   占位符后面一个参数时不用括号和逗号

while 
 while 真值表达式：
      语句块1
 else：
     语句块2


break 
终止循环  （while 或 for）



day05

for 语句
  作用：
  用来遍历可迭代对象的数据元素

 可迭代对像是指能一次获取数据对元祖的对像
 可迭代对象包括：
 字符串 str
 （以下后面会讲） 
 列表 list
 元祖  tuple
 字典dirt
 集合set
 语法：
 for 变量列表 in 可迭代对象：
      语句块1
 else：
 语句块2

说明：

1.可迭代对象每次提供一个元素依次赋值给变量列表中的变量  赋值完毕后执行语句块1 重复执行此步骤知道可迭代对象不能提供数据为止
2.可迭代对象迭代完所有的元素后，执行else字句部分的语句块2 然后退出循环
3.else字句部分可以省略不写（同while类似）
4.当在循环内部用breake终止循环时 else字句部分的语句不会执行

range 函数
函数  说明：
range（stop） 用来生成 0~ stop 区间内的整数  直到stop为止  不包含stop
range（start，stop， step）用来生成start~stop区间内的整数 直到stop为止（不包含stop）  每个整数间隔step（可为负，不可为0）
作用”
用来创建一个生成一系列的整数的可迭代对象（也叫整数序列生成器）
说明：
此函数调用返回回来的对象可用于for语句   取值
示例：

　     range(4)         0123
       range(3,6)       345
       range(1,10,2)    13579
       range(5,0,-1)    54321
       range(4,0)       空


    for 语句的注意事项
      1.for 中 range 的调用次序
请问此程序的打印结果是什么 ?
   i=6
   for x in range(1,i)
   print('x=',x 'i=',i)
   i -= 1
   循环5次   循环次数与i的变化没有关系
   2.for语句内的变量可能不会被创建
   for x in range（4，0）
       print(x)
    else:
        print("循环结束后：， x= ", x) 走错 此变量不存在

因为range（4,0）是错误的   不会运行  所以x，没有创建  


for语句嵌套
与while 一样 for语句是语句 （复合语句 ）他可以嵌套到其他复合语句中
如：
示例：
  for x in “ABC”：
      for y in “123”：
          prin（x + y）

===>    A1A2A3B1B2B3C1C2C3


continue 语句：
问题：
   如何让程序不再向下执行  重新依次开始新的循环
作用”：
用于循环语句（while for语句 ）中  不再执行本次循环内
continue之后的语句 重新开始一次新的循环
说明：
1.在for 语句中 执行continue 语句 将会从可迭代对象中去下一个元素 绑定变量后再次进行循环
2.在while 语句中执行continue 语句 将会直接跳到真值表达式处 重新判断循环条件
语法：
 continue
 

循环小结
while语句
for语句
  字符串 str
  range（）调用后的返回值
  break 语句（终止循环）
  continue语句（开始新的一次循环）


列表
问题
如何让计算机运行的数据临时存储在一个地方 同时又方便添加
删除 修改等操作


什么是列表

列表　　list
         列表是一种容器
         列表是可以被改变的序列容器
         列表时由一系列特定元素组成  元素与元素之间没有任何的关联关系
         他们之间有先后顺序关系


    python序列类型简介
    字符串 sta
    列表 list
    元祖 tuple
    子节串 bytes
    字节数组 bytearray


创建列表的字面值 []
　　　Ｌ＝［］　Ｌ绑定一个新创建的空间列表
创建一个非空列表的字面值
　　　Ｌ＝［1，2，3，4］
　　　Ｌ＝［＂北京＂，＂上海＂，＂深圳＂］　　　
　　　Ｌ＝［1，＂二＂,3.14，＂Four＂］
      L = [1,2,[3.1,3.2], 4]

列表的构造函数（创建）函数
　　　　list()   创建一个空的列表　　＝　［］
　　　　list(iterable)  用可迭代对象创建一个列表
示例：
  L = list()     　　　　　　　　绑定空列表
  L = list("heloo")　　　　　　绑定［'h','e','l','l','o'］
  L = list(range(10))        绑定［0，1，..，9］

列表的运算　　属于序列的一种
　　　算数运算符　
　　　　　　＋　　　有序的加
 用于拼接列表
 x = [1,2]
 y = [3,4]
 z = x + y    ####  z = [1,2,3,4]
z2 = y + x        $$$$$$   z2 = [3,4,1,2]



　       +=    用于原列表与右侧可迭代对象进行拼接，用变量绑定列表
          　　　语法：　x += 可迭代对象
　　　　　　　　　　　如：  x = [1,2,3]
　　　　　　　　　　　　    y = [4,5,6]
                             “ABC”：
                         x += “ABC”：
                         x += range（10,13）
                              
                       x += y  -->   
                        x = [1,2,3,4,5,6]


         加会改变ID  +=不会


                        
        列表是可变容器 += 会改变元列表
          *    生成重复的列表
　　　　　　　　x = [1,2] * 3
            -->   x = [1,2,1,2,1,2]
              
              x = [1,2,3]
              x *= 2
              -->  x = [1,2,3,1,2,3]


　　　　　　*= 　让原列表重复ｎ次再用原变量绑定
　　　列表的比较运算：
      <  <=  >   >=  ==  !=
      　　　　　
  说明：
  列表的比较规则与字符串的比较规则相同
  列表要求每两个元素能依次进行比较  负责会出现类型错误
  示例：

  x =[1,2,3]
 y =  [2,3,4]
    x != y）   #True
    x < y   #True

   [1,2,3] < [1,3,2]
[1,"Two"] >['Two',1]    #TypeError 出错  不能字符串 和 整数比（int str）

列表是可迭代对象
L = [1,3,5,10]
for x in L:
    print(x)
    #############1,3,5,10


列表的  in  /  not in 运算符
判断一个值是否存在于列表中 如果存在返回True  负责返回False
同字符串的in  运算符   用于检查一个值是否存在于列表中
示例”
x = [1,'two',3,'四']
3 in x   True
4 in x    false
5  not in x   True
1 not in x    false


















































































































